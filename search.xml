<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>日期类&amp;String类</title>
      <link href="/2019/12/19/ri-qi-lei-string-lei/"/>
      <url>/2019/12/19/ri-qi-lei-string-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="一、日期类"><a href="#一、日期类" class="headerlink" title="一、日期类"></a>一、日期类</h2><h3 id="1-long类型的时间（时间的毫秒数）"><a href="#1-long类型的时间（时间的毫秒数）" class="headerlink" title="1.long类型的时间（时间的毫秒数）"></a>1.long类型的时间（时间的毫秒数）</h3><p>使用情况较少</p><h4 id="1-1-获取当前的时间"><a href="#1-1-获取当前的时间" class="headerlink" title="1.1 获取当前的时间"></a>1.1 获取当前的时间</h4><p>获取到当前日期的毫秒数 ，long类型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">long</span> time <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="1-2-输入毫秒数"><a href="#1-2-输入毫秒数" class="headerlink" title="1.2 输入毫秒数"></a>1.2 输入毫秒数</h4><p>直接输出time，得到的是一长串数字，即当前时间的毫秒数</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前的毫秒数"</span><span class="token operator">+</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="1-3-将毫秒换算成年份"><a href="#1-3-将毫秒换算成年份" class="headerlink" title="1.3 将毫秒换算成年份"></a>1.3 将毫秒换算成年份</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//当前时间2019年12月</span><span class="token comment" spellcheck="true">//除以1000毫秒，除以60秒，除以60分钟,除以24小时,除以一年365天</span><span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>time<span class="token operator">/</span><span class="token number">1000</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">60</span><span class="token operator">/</span><span class="token number">24</span><span class="token operator">/</span><span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>这里的year时间是输出49</strong>，因为计算机中时间的其实从1970年开始</p><h3 id="2-date类型的时间"><a href="#2-date类型的时间" class="headerlink" title="2.date类型的时间"></a>2.date类型的时间</h3><p>因为千年虫问题，所以很多方法过时</p><h4 id="2-1-获取当前的时间"><a href="#2-1-获取当前的时间" class="headerlink" title="2.1 获取当前的时间"></a>2.1 获取当前的时间</h4><pre class=" language-java"><code class="language-java">Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日期为"</span><span class="token operator">+</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出日期为Tue Dec 10 21:17:03 CST 2019</span></code></pre><h4 id="2-2-获取年份月份"><a href="#2-2-获取年份月份" class="headerlink" title="2.2 获取年份月份"></a>2.2 获取年份月份</h4><h5 id="获取年份"><a href="#获取年份" class="headerlink" title="获取年份"></a>获取年份</h5><p>这个方法会有横线，代表这个方法已经过时了，很少被用到，因为有千年虫的问题，导致结果不对</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年份"</span><span class="token operator">+</span>date<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出119</span></code></pre><h5 id="获取月份"><a href="#获取月份" class="headerlink" title="获取月份"></a>获取月份</h5><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年份"</span><span class="token operator">+</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出12</span></code></pre><h3 id="3-calendar（格林威治时间）"><a href="#3-calendar（格林威治时间）" class="headerlink" title="3.calendar（格林威治时间）"></a>3.calendar（格林威治时间）</h3><h4 id="3-1-创建格林威治时间对象"><a href="#3-1-创建格林威治时间对象" class="headerlink" title="3.1 创建格林威治时间对象"></a>3.1 创建格林威治时间对象</h4><p>获取格林威治的时间有两种方式</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第一种：通过子类创建格林威治时间对象</span>Calendar cal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二种：使用工厂方法创建对象，不使用new，这是系统给的另一个创建日历类对象的方法</span><span class="token comment" spellcheck="true">//推荐使用</span>Calendar cal <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出cal:java.util.GregorianCalendar[里面是各种参数的值]</span></code></pre><h4 id="3-2-获取具体的时间"><a href="#3-2-获取具体的时间" class="headerlink" title="3.2 获取具体的时间"></a>3.2 获取具体的时间</h4><p><strong>首先可以将格林威治转换为Date类型，也可以转换成long类型，然后直接输出</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//转换为Date类型后，可以使用Date类型中的方法</span>Date date <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Tue Dec 10 21:27:15 CST 2019</span><span class="token comment" spellcheck="true">//转换为Long类型，获取的是时间的毫秒数，从1970年到现在</span><span class="token keyword">long</span> times <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">getTimeInMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1576860071198</span></code></pre><p><strong>获取到具体的时间</strong>(<code>get()</code>方法)</p><p><strong>注意：</strong></p><ul><li>月份的范围是0-11（即一月为0）</li><li>星期的范围是0-6且星期的顺序为（周日0，周六6）</li><li><code>get( 参数)</code>里的参数是<code>int</code>型的数据，返回值也是<code>int</code>类型</li></ul><pre class=" language-java"><code class="language-java">Calendar cal <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取到年份</span>cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取到月份（范围是0-11）</span>cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取到当前时间是这个月的第几天</span><span class="token comment" spellcheck="true">//两种办法</span>cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取到当前时间是这周的第几天（范围0-6）</span>cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取当前时间所在的周在这个月的第几周</span>cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_WEEK_IN_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按照12小时制获取当前的小时</span>cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>HOUR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按照24小时制获取当前的小时</span>cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>HOUR_OF_DAY<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取到分钟</span>cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MINUTE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取到秒数</span>cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="修改时间（set，add方法）"><a href="#修改时间（set，add方法）" class="headerlink" title="修改时间（set，add方法）"></a><strong>修改时间</strong>（<code>set</code>，<code>add</code>方法）</h4><p><strong>set方法</strong></p><p>参数列表：(<code>需要修改的时间</code>，<code>修改后的数据</code>)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//修改年份</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span><span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改月份为2月</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再将当前月份的日期修改为31号</span>cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个时候会输出3月3号，日历会根据每月的天数，自动跳到次月</span></code></pre><p><strong>add方法</strong></p><p>参数列表：（<code>需要修改的时间</code>，<code>需要往时间上加的数据</code>）</p><pre class=" language-java"><code class="language-java">cal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前的年份2019，+2，变为2021</span><span class="token comment" spellcheck="true">//如果需要时间回退，那只需后面的参数变成负数就可以了</span></code></pre><h3 id="4-定时器"><a href="#4-定时器" class="headerlink" title="4.定时器"></a>4.定时器</h3><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//创建定时器</span>Timer timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定时器的任务调度，自动执行</span>timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//匿名内部类，重写run方法，定时器需要执行的操作</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto‐generated method stub</span>    Date d3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">/</span>转换输出时间    SimpleDateFormat format4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String str3 <span class="token operator">=</span> format4<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>d3<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里的参数，开始时间，每次调度任务执行的间隔</span><span class="token comment" spellcheck="true">//每隔10秒输出一次时间</span></code></pre><h3 id="5-日期类与字符串的互相转换"><a href="#5-日期类与字符串的互相转换" class="headerlink" title="5.日期类与字符串的互相转换"></a>5.日期类与字符串的互相转换</h3><p>日期类与字符串相互转换，主要用到<code>SimpleDateFormat</code>转换工具类</p><p>字符串转<code>Date</code>用<code>parse</code></p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"2019-12-12 20:20:20"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//y:代表年</span><span class="token comment" spellcheck="true">//M:代表月份</span><span class="token comment" spellcheck="true">//d:日</span><span class="token comment" spellcheck="true">//E:星期</span><span class="token comment" spellcheck="true">//a:上午，下午</span><span class="token comment" spellcheck="true">//H:小时</span><span class="token comment" spellcheck="true">//m:分</span><span class="token comment" spellcheck="true">//s:秒</span>SimpleDateFormat format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date date <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>日期类型转化为字符串用<code>format</code></p><pre class=" language-java"><code class="language-java">Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同样使用SimpleDateFormat类转换，先定义转换格式</span>SimpleDateFormat format2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd HH/mm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用format方法将日期转换为字符串</span>String str2 <span class="token operator">=</span> format2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>日期类型中的时区</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设置时区</span>TimeZone zone <span class="token operator">=</span> TimeZone<span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token string">"GTM+8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置时间输出格式</span>SimpleDateFormat format3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置时区</span>format<span class="token punctuation">.</span><span class="token function">setTimeZone</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="6-三种日期类型的互相转换"><a href="#6-三种日期类型的互相转换" class="headerlink" title="6.三种日期类型的互相转换"></a>6.三种日期类型的互相转换</h3><h4 id="long转Date转Calendar"><a href="#long转Date转Calendar" class="headerlink" title="long转Date转Calendar"></a>long转Date转Calendar</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//long先转Date</span><span class="token keyword">long</span> longTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>longTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Date再转Calendar</span>Calendar cal <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cal<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Calendar转Date转long"><a href="#Calendar转Date转long" class="headerlink" title="Calendar转Date转long"></a>Calendar转Date转long</h4><pre class=" language-java"><code class="language-java">Calendar cal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//calendar转Date</span>Date date <span class="token operator">=</span> cal<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Date再转long</span><span class="token keyword">long</span> longTime <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="7-定时器"><a href="#7-定时器" class="headerlink" title="7. 定时器"></a>7. 定时器</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建定时器</span>Timer timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定时器的任务调度，自动执行</span>timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//匿名内部类，重写run方法，定时器需要执行的操作</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//转换输出时间</span>        SimpleDateFormat format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的参数，开始时间，每次调度任务执行的间隔</span><span class="token comment" spellcheck="true">//每隔10秒输出一次时间</span></code></pre><h2 id="二、String类"><a href="#二、String类" class="headerlink" title="二、String类"></a>二、String类</h2><h3 id="1-创建字符串"><a href="#1-创建字符串" class="headerlink" title="1-创建字符串"></a>1-创建字符串</h3><ul><li><p>第一种，直接创建str并赋值</p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span></code></pre></li><li><p>第二种，使用new</p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>这段代码创建了一个或者两个对象</li><li>方法区中字符串常量池中查询是否有”123”这个字符串，如果有之间创建<code>str</code>对象然后指向<code>&quot;123&quot;</code>,如果没有<code>&quot;123&quot;</code>就会先创建一个<code>&quot;123&quot;</code>然后再创建<code>str</code>，再将<code>str</code>指向<code>&quot;123&quot;</code></li></ul></li><li><p>第三种，使用字符数组创建字符串</p><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="2-字符串拼接的两种方式"><a href="#2-字符串拼接的两种方式" class="headerlink" title="2-字符串拼接的两种方式"></a>2-字符串拼接的两种方式</h3><ul><li><p>直接使用 <code>+</code> 拼接</p></li><li><p>使用<code>concat</code>方法</p><pre class=" language-java"><code class="language-java">String str1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>String str2 <span class="token operator">=</span> <span class="token string">"def"</span><span class="token punctuation">;</span>str1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="3-String常用API"><a href="#3-String常用API" class="headerlink" title="3-String常用API"></a>3-String常用API</h3><ul><li><p>获取指定位置上的字符，<strong>返回char型</strong></p><pre class=" language-java"><code class="language-java">str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回char类型，字符串下标从0开始</span>str<span class="token punctuation">.</span><span class="token function">cahrAt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取最后一个字符</span></code></pre></li><li><p>获取子字符串第一次出现的位置，<strong>返回int型</strong></p><pre class=" language-java"><code class="language-java">str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回int类型,参数中放入一个字符串，获取该字符串第一次在str中出现的位置（这个位置是字符串之首在str中的位置）</span>str<span class="token punctuation">.</span><span class="token function">indexof</span><span class="token punctuation">(</span><span class="token string">"字符串"</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从str的第8位开始(包括第8位)，向后查找字符串第一次出现在str中的位置</span><span class="token comment" spellcheck="true">//注意，如果没有，则返回-1；</span></code></pre></li><li><p>判断字符串首尾的内容，<strong>返回boolean型</strong></p><pre class=" language-java"><code class="language-java">str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//起始位置</span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始位置</span></code></pre></li><li><p>将字符串转换成字符数组</p><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>判断字符串是否包含指定</p><pre class=" language-java"><code class="language-java">str<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回boolean</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查找不到返回-1</span></code></pre></li><li><p>截取字符串，*<em>返回String类型 *</em>  </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//substring方法中只加一个参数那么就是从下标开始截取到末尾</span><span class="token comment" spellcheck="true">//如果有两个参数，那么截取的是指定参数区间内的子字符串[参数1，参数2)</span>str<span class="token punctuation">.</span><span class="token function">subString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>字符串的分割，<strong>返回String数组</strong></p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"192.168.0.4"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数使用正则表达式</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> str1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按小数点分割</span><span class="token comment" spellcheck="true">//str1中存放{"192","168","0","4"}</span></code></pre></li><li><p>大小写转换，<strong>返回的是String类型</strong></p><pre class=" language-java"><code class="language-java">str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将英文全部转为小写</span>str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将英文全部转为大写</span></code></pre></li><li><p>去除头尾空格</p><pre class=" language-java"><code class="language-java">str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去除头尾的空格</span></code></pre></li><li><p>替换字符串中的元素</p><pre class=" language-java"><code class="language-java">str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将字符串str中的参数1全部替换成参数2</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数1可以是正则表达式，也可以是字符串，将参数1全部替换成参数2</span><span class="token comment" spellcheck="true">//当然，如果要移除str中的所有的参数1，也可以把参数2写成"";</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="4-判断字符串相等"><a href="#4-判断字符串相等" class="headerlink" title="4-判断字符串相等"></a>4-判断字符串相等</h3><pre class=" language-java"><code class="language-java">String strA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String strB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strA <span class="token operator">==</span> strB<span class="token comment" spellcheck="true">//false,比较的是地址</span>strA<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>strB<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true,比较的是字符串的值</span></code></pre><pre class=" language-java"><code class="language-java">String strA <span class="token operator">=</span> <span class="token string">"tom"</span><span class="token punctuation">;</span>String strB <span class="token operator">=</span> <span class="token string">"tom"</span><span class="token punctuation">;</span>strA <span class="token operator">==</span> strB<span class="token comment" spellcheck="true">//true,地址相同</span>strA<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>strB<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//true,内容相同</span><span class="token comment" spellcheck="true">//字符串存在字符串常量池中,因为没有new，所以strA跟strB的地址都指向</span></code></pre><pre class=" language-java"><code class="language-java">String strA <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>String strB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String strAB <span class="token operator">=</span> strA<span class="token operator">+</span>strB<span class="token punctuation">;</span>String strC <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token operator">+</span><span class="token string">"World"</span><span class="token punctuation">;</span>String strD <span class="token operator">=</span> <span class="token string">"helloWorld"</span><span class="token punctuation">;</span>strAB <span class="token operator">==</span> strD<span class="token comment" spellcheck="true">//false，使用new创建字符串，会在堆空间中开辟空间存储地址并指向"World"与7直接指向常量池不同</span>strC <span class="token operator">==</span> strD<span class="token comment" spellcheck="true">//true，strC在字符串常量池中，拼接成helloWorld,系统会自动地将地址指向helloWorld，所以地址是一致的</span>String a <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>String b <span class="token operator">=</span> <span class="token string">"World"</span><span class="token punctuation">;</span>String ab <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>String c <span class="token operator">=</span> <span class="token string">"helloWorld"</span><span class="token punctuation">;</span>c <span class="token operator">==</span> ab<span class="token comment" spellcheck="true">//false,只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中,而ab并没有将两个字符串在常量池中创建helloWorld，所以ab的地址并没有被引到helloWorld，所以地址值不相等</span></code></pre><h3 id="5-String-StringBuffer-StringBuilder"><a href="#5-String-StringBuffer-StringBuilder" class="headerlink" title="5-String,StringBuffer,StringBuilder"></a>5-String,StringBuffer,StringBuilder</h3><h4 id="String字符串是不可变的"><a href="#String字符串是不可变的" class="headerlink" title="String字符串是不可变的"></a>String字符串是不可变的</h4><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"甜甜"</span><span class="token punctuation">;</span>str <span class="token operator">+=</span> <span class="token string">"喝奶茶"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//String字符串的不可变是指String常量池中存储的字符串是不可变的</span><span class="token comment" spellcheck="true">//String str = "甜甜";str的地址会指向常量池中的"甜甜"</span><span class="token comment" spellcheck="true">//str += "喝奶茶";str的地址会指向常量池中的"甜甜喝奶茶"，而不是将常量池中的"甜甜"变更为"甜甜喝奶茶"，是换了一个地址；</span><span class="token comment" spellcheck="true">//"甜甜"一旦在常量池中生产出来，那么这个数据就是不可变化的</span></code></pre><p><strong>注意</strong>：字符串缓冲区（字符串常量池）：当定义字符串时，首先会去字符串常量池查找是否有 该字符串的对象，如果有会直接引用该对象，没有就会创建该字符串对象</p><h4 id="StringBuffer与StringBuilder"><a href="#StringBuffer与StringBuilder" class="headerlink" title="StringBuffer与StringBuilder"></a>StringBuffer与StringBuilder</h4><p>StringBuffer是一个线程安全的可变字符串序列，它是一个类似于String的字符缓冲区，其实体容量会随着字符串改变而自动改变</p><h5 id="1-StringBuffer，StringBuilder中的特殊API："><a href="#1-StringBuffer，StringBuilder中的特殊API：" class="headerlink" title="1.StringBuffer，StringBuilder中的特殊API："></a>1.StringBuffer，StringBuilder中的特殊API：</h5><pre class=" language-java"><code class="language-java">StringBuffer sbf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"门前大桥下"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串的追加</span>sbf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"游过一群鸭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向指定位置插入字符串，两个参数  位置和需要插入的字符串</span>sbf<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在下标为5的位置上插入一个","，之后的字符串依次后移</span><span class="token comment" spellcheck="true">//修改指定索引出的字符，参数为 位置，需要修改的字符</span>sbf<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>sbf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'鱼'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后一位替换为鱼</span></code></pre><h5 id="2-String，StringBuffer与StringBuilder中的相互转换"><a href="#2-String，StringBuffer与StringBuilder中的相互转换" class="headerlink" title="2.String，StringBuffer与StringBuilder中的相互转换"></a>2.String，StringBuffer与StringBuilder中的相互转换</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//String转StringBuffer/StringBuilder</span>StringBuffer sbf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//StringBuffer/StringBuilder转为String</span>sbf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//StringBuffer/StringBuilder互相转换需要先转为String再转为需要的类型</span>StringBuffer sbf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>StringBUlider sbd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBulider</span><span class="token punctuation">(</span>sbf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3-三者的区别"><a href="#3-三者的区别" class="headerlink" title="3.三者的区别"></a>3.三者的区别</h5><table><thead><tr><th></th><th>String</th><th>StringBuffer</th><th>StringBulider</th></tr></thead><tbody><tr><td>对象类型</td><td>字符串常量，不可变</td><td>字符串变量，可变</td><td>字符串变量，可变</td></tr><tr><td>线程安全性</td><td>不安全</td><td>安全</td><td>不安全</td></tr><tr><td>执行效率</td><td>效率最低</td><td>效率比StringBulider低</td><td>效率较高</td></tr></tbody></table><p>小提示：</p><ul><li><p>在实际的项目开发中，重写toString方法时，在连接字符串的时候，使用StringBulider连接</p></li><li><p>String是基本数据类型，StringBulider跟StringBuffer是引用数据类型</p></li></ul><p>总结：</p><ul><li>操作少，数据少用String</li><li>单线程，操作数据多，用StringBulider，单线程不存在线程安全</li><li>多线程，操作数据多，用StringBuffer，防止多线程的安全性问题</li></ul><hr><h2 id="软帝学院传送门"><a href="#软帝学院传送门" class="headerlink" title="软帝学院传送门"></a>软帝学院传送门</h2><blockquote><h3 id="Mediocre-or-Extraordinary"><a href="#Mediocre-or-Extraordinary" class="headerlink" title="Mediocre or Extraordinary"></a><strong><a href="http://rd.ke.qq.com" target="_blank" rel="noopener">Mediocre or Extraordinary</a></strong></h3></blockquote>]]></content>
      
      
      <categories>
          
          <category> 阶段小结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java基础 </tag>
            
            <tag> java核心API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5简单笔记</title>
      <link href="/2019/12/18/html5-jian-dan-bi-ji/"/>
      <url>/2019/12/18/html5-jian-dan-bi-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://alagger-zyy.github.io/2019/12/18/html5-jian-dan-bi-ji-2/" target="_blank" rel="noopener">Html5简单笔记2传送门</a></p></blockquote><h2 id="一、单页应用view"><a href="#一、单页应用view" class="headerlink" title="一、单页应用view"></a>一、单页应用view</h2><h3 id="1-meta"><a href="#1-meta" class="headerlink" title="1-meta"></a>1-meta</h3><p>简介：</p><ol><li><code>&lt;meta&gt;</code>元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。</li><li><code>&lt;meta&gt;</code> 标签位于文档的头部，不包含任何内容。</li></ol><p>以下内容均在<code>&lt;head&gt;</code>下：</p><ul><li><p>定义文档的作者</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><p>描述文档的作用</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>这是学习meta<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><p>跳转到百度</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3;url<span class="token punctuation">=</span>http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> </code></pre></li><li><p>每隔0.5秒刷新一下自己 </p><p>&lt;meta http-equiv=”refresh” content=”0.5”&gt;</p></li><li><p>title标签中的内容是会出现在网页的标题部分的</p><p>&lt;title&gt;meta标记&lt;/title&gt;</p></li></ul><h3 id="2-font"><a href="#2-font" class="headerlink" title="2-font"></a>2-font</h3><p>简介：</p><p>HTML提供了文本样式标记<font>，<font>用来控制网页中文本的字体、字号和颜色，多种多样的文字效果可以使网页变得更加绚丽。*<em>但是这是一个已经过时的标签 - 字体标签 - 都是会被后面css替代。 *</em>  </p><ul><li><p>size属性的范围是从1～7</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#999<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>字体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="3-文本标签"><a href="#3-文本标签" class="headerlink" title="3-文本标签"></a>3-文本标签</h3><ul><li><p>加粗 </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span></code></pre></li><li><p>换行</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre></li><li><p>加粗-语义方面强调</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span></code></pre></li><li><p>斜体 </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>斜体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span></code></pre></li><li><p>斜体语义</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span></code></pre></li><li><p>下划线</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span></code></pre></li><li><p>贯穿线，删除线</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">></span></span></code></pre></li><li><p>下标</p><pre class=" language-html"><code class="language-html">O<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span></code></pre></li><li><p>上标</p><pre class=" language-html"><code class="language-html">3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span></code></pre></li><li><p>©</p><pre class=" language-html"><code class="language-html"><span class="token entity" title="&copy;">&amp;copy;</span></code></pre></li><li><p>®</p><pre class=" language-html"><code class="language-html"><span class="token entity" title="&reg;">&amp;reg;</span></code></pre></li><li><p>空格</p><pre class=" language-html"><code class="language-html"><span class="token entity" title="&nbsp;">&amp;nbsp;</span></code></pre></li></ul><h3 id="4-form表单"><a href="#4-form表单" class="headerlink" title="4-form表单"></a>4-form表单</h3><p>servlet中get请求和post请求的区别？ </p><p>method属性来指定的，默认值就是get action指向我们的控制层的后台的地址</p><ul><li>普通文本框<ul><li>正则表达式 - 限定用户的合法输入</li><li>软件开发中，一定是前端校验和后端校验结合使用的</li><li>pattern - 正则表达式</li><li>只要出现pattern，那么一定要出现required，否则pattern会失效</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>首字母要小写,总的长度在6-8<span class="token punctuation">"</span></span>        <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[a-z][a-zA-Z0-9]{5,7}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre><ul><li><p>密码框</p><ul><li>[0-9]{5} -&gt; 只能出现5次的纯数字</li><li>[0-9]{5,} -&gt; 至少出现5次的纯数字</li><li>[0-9]{5,7} -&gt; 数字出现的次数是5-7次</li><li>[0-9]? -&gt; 至多1次 - 0次或者1次</li><li>[0-9]* -&gt; 0次或者多次</li><li>[0-9]+ -&gt; 至少1次 - 1次或者多次</li><li>[0-9] 也可以写成\d</li></ul><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>\d{5}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre></li><li><p>数字框</p><ul><li>默认的tel不进行正则的认证</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1[3|5|7|8|9][0-9]{9}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre></li><li><p>邮箱</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre></li><li><p>数字框</p><ul><li><img src="https://article-1300910484.cos.ap-shanghai.myqcloud.com/Html5%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/3%20%281%29.png" alt=""></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">step</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre></li><li><p>进度条</p><ul><li><img src="https://article-1300910484.cos.ap-shanghai.myqcloud.com/Html5%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/3%20%282%29.png" alt=""></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>range<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre></li><li><p>单选按钮 </p><ul><li>必须要给定name属性</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre></li><li><p>文件选择框</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre></li><li><p>复选框 同一组的需要指定相同属性值的name</p><pre class=" language-html"><code class="language-html">hobbies: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>睡觉           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>玩游戏  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre></li><li><p>下拉框 </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>===请选择===<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>钟楼区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>新北区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>武进区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li><li><p>文本域</p><ul><li><img src="https://article-1300910484.cos.ap-shanghai.myqcloud.com/Html5%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/3%20%283%29.png" alt=""></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre></li><li><p>提交按钮</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><p>重置按钮</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>清空<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre></li><li><p>普通按钮 - 配合js</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>普通按钮<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是一个天才！"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>图片提交按钮</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../imgs/gif-0343.gif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><p>提交按钮</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></li><li><p>重置按钮 </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>重置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></li><li><p>普通按钮</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>普通按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="5-多媒体"><a href="#5-多媒体" class="headerlink" title="5-多媒体"></a>5-多媒体</h3><ul><li><p>插入音频</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horse.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audio/ogg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../resources/sounds/萌萌哒天团 - 帝都.mp3<span class="token punctuation">"</span></span>                <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>audio/mpeg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span></code></pre></li><li><p>插入视频</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>320<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>240<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>----视频地址----<span class="token punctuation">"</span></span>                                 <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movie.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/ogg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="6-图片标签"><a href="#6-图片标签" class="headerlink" title="6-图片标签"></a>6-图片标签</h3><p>图片的大小 </p><ul><li><p>banner - 大小要控制在120kb-150kb</p></li><li><p>正文 不能10kb</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../imgs/sb.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片加载失败<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h3 id="7-块元素和内联元素"><a href="#7-块元素和内联元素" class="headerlink" title="7-块元素和内联元素"></a>7-块元素和内联元素</h3><p><strong>块元素</strong>: p br hr h1~h6 ul li ol table tr td div</p><p>给内联元素黄色背景，给块元素绿色背景</p><ul><li>内联元素<ul><li>不会独占一整行，标签体中的内容占多少宽度，那么这个元素就占多少</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span><span class="token punctuation">></span></span>font1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span><span class="token punctuation">></span></span>font2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span><span class="token punctuation">></span></span>font3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span></code></pre><ul><li>段落标签<ul><li>块元素 - 会独占一整行</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    p1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>   p2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>   p3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>运行结果：</p><p><img src="https://article-1300910484.cos.ap-shanghai.myqcloud.com/Html5%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/1.png" alt=""></p><h3 id="8-列表标记"><a href="#8-列表标记" class="headerlink" title="8-列表标记"></a>8-列表标记</h3><ul><li><p>无序列表</p><ul><li>样式■  ■</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>square<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>学校课程        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><ul><li>样式A.   B.</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>学校课程        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre></li><li><p>列表标记是可以嵌套使用</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>第一阶段        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Java基础<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>OOP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>高级特性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="9-标题标记"><a href="#9-标题标记" class="headerlink" title="9-标题标记"></a>9-标题标记</h3><p> 供搜索引擎来检索的</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>first<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>second<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>third<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>four<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>five<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>six<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span></code></pre><img src="https://article-1300910484.cos.ap-shanghai.myqcloud.com/Html5%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0/2.png" style="zoom:80%;" /><h3 id="10-超链接"><a href="#10-超链接" class="headerlink" title="10-超链接"></a>10-超链接</h3><ul><li><p>跳转</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- target属性 _self - 在本窗口中打开新的窗口               _blank - 打开新的窗口 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>空链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>空链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li><li><p>通过超链接触发js</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:test()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>单机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"确定删除吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>下载</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../imgs/test.doc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li><li><p>跳转到自己指定的界面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1-meta.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>meta<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li><li><p>发送邮箱 </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mailto:849962874@qq.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发送邮件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="11-锚点"><a href="#11-锚点" class="headerlink" title="11-锚点"></a>11-锚点</h3><p>点击文字跳转到本页面的指定锚点</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>    //#加锚点id    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#record<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>历史回顾3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 作了记号 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>record<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>历史回顾3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></code></pre><p>返回到顶部</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回顶部⬆️<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></code></pre><h3 id="12-表格"><a href="#12-表格" class="headerlink" title="12-表格"></a>12-表格</h3><ul><li><p>表格最全的写法</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 最全的写法 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>350<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 表格说明 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>学生信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 表头 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 表头中的列 - th自带加粗居中的样式 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 表格的主体内容 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 普通列 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>tom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 普通列 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>james<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 表格的尾部 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre></li><li><!-- 精简的表格 --><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>350<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token comment" spellcheck="true">&lt;!-- 虽然省略了tbody但是仍然是存在的 --></span>            <span class="token comment" spellcheck="true">&lt;!-- 行 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 表头中的列 - th自带加粗居中的样式 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 普通列 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>tom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 普通列 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>james<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 普通列 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1003<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>gosling<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre></li><li><p>行合并</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></code></pre></li><li><p>列合并</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>tom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span></code></pre></li><li><p>表格中是可以插入按钮文本框的</p></li><li><p>想要改什么的属性，就在那里加入属性</p></li><li><p>如何控制每行的单元格等距？</p><ul><li>在单元格第一行的列的单元格上加上宽度</li></ul></li></ul><h2 id="二、样式CSS"><a href="#二、样式CSS" class="headerlink" title="二、样式CSS"></a>二、样式CSS</h2><p><strong>注意：</strong></p><p>软件开发的原则:高内聚，低耦合(html和css)</p><p>行内样式如果出现了和内部样式 【相同的样式属性的时候】，那么采取的是就近原则。</p><ul><li><p><strong>行内样式&gt;内部样式跟外部样式</strong></p></li><li><p><strong>内部样式与外部样式采取就近原则（谁靠近代码，就用谁的）</strong></p></li></ul><p>css语法检测，打包工具 - webpack</p><p>在开发中多使用外部样式，行内样式用来微调（所以优先级高），我们实训中采用内部样式，方便调试</p><h3 id="1-内部样式CSS"><a href="#1-内部样式CSS" class="headerlink" title="1-内部样式CSS"></a>1-内部样式CSS</h3><p>写在头部</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token comment" spellcheck="true">/* 标签选择器 */</span>    <span class="token selector">div</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 样式名:样式值 */</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px dashed <span class="token hexcode">#000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>//========================<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>下     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        div+css布局    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="2-行内样式Css"><a href="#2-行内样式Css" class="headerlink" title="2-行内样式Css"></a>2-行内样式Css</h3><p>写在行里</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        行内样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="3-外部样式CSS"><a href="#3-外部样式CSS" class="headerlink" title="3-外部样式CSS"></a>3-外部样式CSS</h3><p>写在头部，链接到外部的CSS文件中，有CSS样式</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../css/hello.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>//=================<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>       div...   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="三、选择器"><a href="#三、选择器" class="headerlink" title="三、选择器"></a>三、选择器</h2><p><strong>注意：</strong>行内的写法&gt;id选择器&gt;类选择器&gt;标签选择器</p><h3 id="0-标签选择器"><a href="#0-标签选择器" class="headerlink" title="0-标签选择器"></a>0-标签选择器</h3><p>css</p><h3 id="1-Id选择器"><a href="#1-Id选择器" class="headerlink" title="1-Id选择器"></a>1-Id选择器</h3><p><strong>注意：</strong></p><ul><li>优先级：行内样式&gt;id选择器 &gt; 标签选择器</li><li>id属性的值必须是唯一的</li></ul><p>建立=================</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token comment" spellcheck="true">/* id选择器  > 标签选择器 */</span>        <span class="token selector"><span class="token id">#s1</span></span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#k1</span></span><span class="token punctuation">{</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 标签选择器 */</span>        <span class="token selector">div</span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><p>使用=================</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        div    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        p    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="2-类class选择器"><a href="#2-类class选择器" class="headerlink" title="2-类class选择器"></a>2-类class选择器</h3><p><strong>注意：</strong></p><ul><li>优先级：行内的写法&gt;id选择器&gt;类选择器&gt;标签选择器</li><li>class属性的值是允许重复的</li></ul><p>建立=================</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token id">#cc</span></span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.c1</span></span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.c2</span></span><span class="token punctuation">{</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.c3</span></span><span class="token punctuation">{</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><p>使用=================</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- class属性的值是允许重复的 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1 c3<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        div    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        p    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个非常干净的内联元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="3-派生选择器"><a href="#3-派生选择器" class="headerlink" title="3-派生选择器"></a>3-派生选择器</h3><ul><li><p>选择id=outer的标签下的所有的span的标签 </p><ul><li>建立=================</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stytle</span><span class="token punctuation">></span></span>        #outer span{            color: red;        }    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stytle</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><ul><li>使用=================</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>大儿子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>大孙子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>二孙子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>二儿子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>//全部会变红</code></pre></li><li><!-- 选择id=outer的标签的第一级的直接子标签  --><ul><li>建立=================</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stytle</span><span class="token punctuation">></span></span>        #outer span{            color: red;        }    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stytle</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><ul><li>使用=================</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>大儿子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>大孙子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>二孙子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>二儿子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>//一级（最外级）的大儿子、二儿子会变红</code></pre></li><li><p>紧紧跟随id=outer的标签的span标签 </p><ul><li>建立=================</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stytle</span><span class="token punctuation">></span></span>        #outer+span{            color: red;        }    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stytle</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><ul><li>使用=================</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>大儿子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>大孙子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>二孙子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>二儿子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>亲兄弟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>表兄弟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>//紧紧跟随id="outer"的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>亲兄弟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>变红了</code></pre></li></ul><h3 id="4-组合选择器"><a href="#4-组合选择器" class="headerlink" title="4-组合选择器"></a>4-组合选择器</h3><p>建立=================</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">div,p</span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><p>使用=================</p><pre class=" language-html"><code class="language-html">//div跟p使用上面的样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>div...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>p...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>全局选择器</p><pre class=" language-html"><code class="language-html">*{    color: red;}</code></pre><blockquote><p><a href="https://alagger-zyy.github.io/2019/12/18/html5-jian-dan-bi-ji-2/" target="_blank" rel="noopener">Html5简单笔记1传送门</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javaweb实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html5 </tag>
            
            <tag> Visual </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap简单笔记</title>
      <link href="/2019/12/18/bootstrap-jian-dan-bi-ji/"/>
      <url>/2019/12/18/bootstrap-jian-dan-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="流失布局"><a href="#流失布局" class="headerlink" title="流失布局"></a>流失布局</h2><ul><li>在<code>head</code>导入<code>bootstrap</code>类库</li></ul><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../plugins/bootstrap-3.3.7-dist/css/bootstrap.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><ul><li>在<code>body</code>导入<code>jquery</code></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../plugins/jquery/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li><p>在<code>body</code>导入<code>bootstrap</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../plugins/bootstrap-3.3.7-dist/js/bootstrap.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="最外层的div"><a href="#最外层的div" class="headerlink" title="最外层的div"></a>最外层的div</h2><pre class=" language-html"><code class="language-html">//默认左右留白<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>//占满整个网页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container-luid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h2><p>栅格一行只有12列</p><pre class=" language-html"><code class="language-html">//定义栅格系统的行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    //定义列    //col-md-offset-3 左边空出3个列    //col-md-3 中型设备，占3个列    //col-xs-6 小型设备，占6个列    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-offset-3 col-md-3 col-xs-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../imgs/ya.gif<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-offset-3 col-md-3 col-xs-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../imgs/ya.gif<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-offset-3 col-md-3 col-xs-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../imgs/ya.gif<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="导航-响应式"><a href="#导航-响应式" class="headerlink" title="导航-响应式"></a>导航-响应式</h2><pre class=" language-html"><code class="language-html">class = "row" 自带margin-left：15pxclass = "container-fluid"自带padding-left：15px//两个一般配合使用</code></pre><h2 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h2><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#myCarousel'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">carousel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          interval<span class="token punctuation">:</span> <span class="token number">4000</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>//4000:4000毫秒//#myCarousel轮播的ID</code></pre><p><a href="https://www.runoob.com/bootstrap/bootstrap-carousel-plugin.html" target="_blank" rel="noopener">教程传送门</a></p><h2 id="搜索框"><a href="#搜索框" class="headerlink" title="搜索框"></a>搜索框</h2><p><a href="https://www.runoob.com/bootstrap/bootstrap-input-groups.html" target="_blank" rel="noopener">教程传送门</a></p><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p><a href="https://www.runoob.com/bootstrap/bootstrap-buttons.html" target="_blank" rel="noopener">教程传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> javaweb实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html5 </tag>
            
            <tag> bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5简单笔记2</title>
      <link href="/2019/12/18/html5-jian-dan-bi-ji-2/"/>
      <url>/2019/12/18/html5-jian-dan-bi-ji-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://alagger-zyy.github.io/2019/12/18/html5-jian-dan-bi-ji/" target="_blank" rel="noopener">【Html5简单笔记】文章传送门</a></p></blockquote><h2 id="1-伪类"><a href="#1-伪类" class="headerlink" title="1-伪类"></a>1-伪类</h2><p>注意写的顺序：link&gt;visited&gt;hover&gt;active</p><ul><li>link:默认的链接的颜色是蓝色的，链接未访问时的样式</li><li>visited:访问之后的样式</li><li>hover:鼠标放在a元素时触发的样式</li><li>active:点击时,没有松开之前的样式</li></ul><p>以<code>a</code>标签来举例：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token comment" spellcheck="true">/* 顺序 */</span>        <span class="token comment" spellcheck="true">/* 默认的链接的颜色是蓝色的，链接未访问时的样式 */</span>        <span class="token selector">a<span class="token pseudo-class">:link</span></span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 链接访问之后的样式 */</span>        <span class="token selector">a<span class="token pseudo-class">:visited</span></span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 鼠标放在a元素时触发的样式 */</span>        <span class="token selector">a<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 点击链接时,没有松开之前的样式 */</span>        <span class="token selector">a<span class="token pseudo-class">:active</span></span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#000</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>//======================<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="2-隐藏和显示"><a href="#2-隐藏和显示" class="headerlink" title="2-隐藏和显示"></a>2-隐藏和显示</h2><ul><li><p>元素的背景颜色</p><pre class=" language-html"><code class="language-html">background-color: 颜色</code></pre></li><li><p>隐藏方式一</p><pre class=" language-html"><code class="language-html"> /* 隐藏 - 隐藏的元素不会占用空间 */display:none;</code></pre></li><li><p>隐藏方式二</p><pre class=" language-html"><code class="language-html">/* 隐藏 - 隐藏的元素仍然是占据空间 */visibility: hidden;</code></pre></li></ul><h2 id="3-显示"><a href="#3-显示" class="headerlink" title="3-显示"></a>3-显示</h2><ul><li><p>以块元素的方式显示</p><pre class=" language-html"><code class="language-html"> span{            background-color: red;            color: white;            /* 让元素以块元素的方式显示 */            display: block;}</code></pre></li><li><p>让块元素以内联元素的方式进行展示 - 不独占一整行</p><pre class=" language-html"><code class="language-html">div{    background-color: teal;            /* 让块元素以内联元素的方式进行展示 - 不独占一整行 */    display: inline;}</code></pre></li></ul><h2 id="4-Background背景样式-html"><a href="#4-Background背景样式-html" class="headerlink" title="4-Background背景样式.html"></a>4-Background背景样式.html</h2><p>背景插入图片设置</p><ul><li><p>插入图片</p><pre class=" language-html"><code class="language-html"> background-image: url("../imgs/ya.gif");</code></pre></li><li><p>设置平铺样式</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//repeat-x 水平平铺</span><span class="token comment" spellcheck="true">//repeat-y 垂直平铺</span><span class="token comment" spellcheck="true">//no-repeat 不平铺</span>background<span class="token operator">-</span>repeat<span class="token operator">:</span> no<span class="token operator">-</span>repeat<span class="token punctuation">;</span></code></pre></li><li><p>设置背景图片的位置</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//顶部中间</span>background<span class="token operator">-</span>position<span class="token operator">:</span> top center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//距离左边是400px 距离顶部是200px</span>background<span class="token operator">-</span>position<span class="token operator">:</span> 400px 200px<span class="token punctuation">;</span></code></pre></li><li><p>固定图片的位置</p><pre><code>background-attachment: fixed;</code></pre></li><li><p>设置背景颜色</p><pre><code>background-color: green;</code></pre></li></ul><h2 id="5-font字体样式"><a href="#5-font字体样式" class="headerlink" title="5-font字体样式"></a>5-font字体样式</h2><ul><li><p>字体家族</p><pre class=" language-java"><code class="language-java">font<span class="token operator">-</span>family<span class="token operator">:</span> <span class="token string">"微软雅黑"</span><span class="token punctuation">,</span> Courier<span class="token punctuation">,</span> monospace<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先使用微软雅黑，没有再用Courier，最后再用monospace</span></code></pre></li><li><p>斜体</p><pre><code>font-style: italic;</code></pre></li><li><p>字体大小</p><pre><code>font-weight:900;font-size: 80px;</code></pre></li></ul><h2 id="6-Text文本样式"><a href="#6-Text文本样式" class="headerlink" title="6-Text文本样式"></a>6-Text文本样式</h2><ul><li><p>去除默认的样式</p><pre><code>.c1{    /* 去除默认的样式 */    text-decoration: none;    color: #000;}</code></pre></li><li><p>设置文本的阴影部分</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span>c2<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 设置文本的阴影部分 */</span>    font<span class="token operator">-</span>size<span class="token operator">:</span> 40px<span class="token punctuation">;</span>    color<span class="token operator">:</span> white<span class="token punctuation">;</span>    text<span class="token operator">-</span>shadow<span class="token operator">:</span> 1px 2px 10px red<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 文本的对齐方式 */</span>    text<span class="token operator">-</span>align<span class="token operator">:</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//1px是左右（正为右负为左），2px是上下（正为上负为下），10px是模糊程度，red是阴影颜色</span></code></pre></li></ul><h2 id="7-Border边框"><a href="#7-Border边框" class="headerlink" title="7-Border边框"></a>7-Border边框</h2><ul><li><p>设置边框（其一）</p><pre class=" language-java"><code class="language-java">border<span class="token operator">:</span>1px solid #<span class="token number">000</span><span class="token punctuation">;</span>width<span class="token operator">:</span> 300px<span class="token punctuation">;</span>height<span class="token operator">:</span> 300px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边框的线为1px，样式为solid，颜色#000</span></code></pre></li><li><p>设置边框（其二）</p><pre class=" language-java"><code class="language-java">border<span class="token operator">-</span>width<span class="token operator">:</span> 1px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边框1px</span>border<span class="token operator">-</span>style<span class="token operator">:</span> dashed<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//样式为dashed</span>border<span class="token operator">-</span>color<span class="token operator">:</span> #<span class="token number">000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//颜色</span></code></pre></li><li><p>设置边框的阴影</p><pre class=" language-java"><code class="language-java">box<span class="token operator">-</span>shadow<span class="token operator">:</span>2px <span class="token operator">-</span>2px 8px #<span class="token number">999</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2px是左右（正为右负为左），-2px是上下（正为上负为下），8px是模糊程度，#999是阴影颜色</span></code></pre></li></ul><h2 id="8-列表样式"><a href="#8-列表样式" class="headerlink" title="8-列表样式"></a>8-列表样式</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">ul</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 去除列表的默认的样式 */</span>        <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 列表样式采取的是文字的方式 */</span>        <span class="token property">list-style-type</span><span class="token punctuation">:</span> hiragana<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 列表样式采取的是图标的方式 */</span>        <span class="token property">list-style-image</span><span class="token punctuation">:</span> <span class="token url">url(../imgs/status_online.png)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>安全退出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="9-Table表格样式"><a href="#9-Table表格样式" class="headerlink" title="9-Table表格样式"></a>9-Table表格样式</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token id">#outer</span></span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* width: 500px; */</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">250</span>px<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*设置文本居中*/</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 设置细边框 */</span>        <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span>table id<span class="token operator">=</span><span class="token string">"outer"</span> align<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//表格对于页面居中</span></code></pre><h2 id="10-媒体查询"><a href="#10-媒体查询" class="headerlink" title="10-媒体查询"></a>10-媒体查询</h2><h2 id="11-定位"><a href="#11-定位" class="headerlink" title="11-定位"></a>11-定位</h2><h3 id="11-1-绝对定位"><a href="#11-1-绝对定位" class="headerlink" title="11.1 绝对定位"></a>11.1 绝对定位</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.c1</span></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* border: 1px solid red; */</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 设置元素为绝对定位 - 只有设置成绝对定位对元素才允许使用top和left */</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 该属性对值越大，越在上方，默认值是0 */</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> -<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="11-2-相对定位"><a href="#11-2-相对定位" class="headerlink" title="11.2 相对定位"></a>11.2 相对定位</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.c2</span></span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#000</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 设置元素为相对定位 */</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span>-<span class="token number">150</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>相对的是自己原本的位置</p><h3 id="11-3相对定位绝对定位配合使用"><a href="#11-3相对定位绝对定位配合使用" class="headerlink" title="11.3相对定位绝对定位配合使用"></a>11.3相对定位绝对定位配合使用</h3><p>原则:外层元素使用相对定位，子元素采用绝对定位</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.c1</span></span><span class="token punctuation">{</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#999</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.c2</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">22</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">22</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 原则:外层元素使用相对定位，子元素采用绝对定位 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>❌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="12-float浮动"><a href="#12-float浮动" class="headerlink" title="12-float浮动"></a>12-float浮动</h2><pre class=" language-html"><code class="language-html">.c1{    background-color: yellow;    width: 300px;    height: 100px;    /* 设置左浮动 - 第一个元素就脱离了文档流 */    float: left;    }</code></pre><h2 id="13-盒子模型"><a href="#13-盒子模型" class="headerlink" title="13-盒子模型"></a>13-盒子模型</h2><ul><li><strong>margin - 外边距</strong></li><li><strong>padding - 内填充</strong></li><li><strong>border - 边框</strong></li></ul><h2 id="14-水平导航栏"><a href="#14-水平导航栏" class="headerlink" title="14-水平导航栏"></a>14-水平导航栏</h2><p>第一步：去除列表的样式</p><pre class=" language-java"><code class="language-java">ul<span class="token punctuation">{</span>    list<span class="token operator">-</span>style<span class="token operator">:</span> none<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去除列表的开头样式</span>    padding<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去除子列表的前面空白</span> <span class="token punctuation">}</span></code></pre><p>第二步：去除链接的默认样式</p><pre class=" language-java"><code class="language-java">a<span class="token punctuation">{</span>    text<span class="token operator">-</span>decoration<span class="token operator">:</span> none<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去除链接的字体样式</span>    color<span class="token operator">:</span> #<span class="token number">000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置字体的颜色</span> <span class="token punctuation">}</span></code></pre><p>第三步：设置链接的样式</p><pre class=" language-java"><code class="language-java">#nav a<span class="token punctuation">{</span>    border<span class="token operator">:</span> 1px solid #<span class="token number">999</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加一个1像素的黑色边框</span>    width<span class="token operator">:</span> 250px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//宽度为250像素</span>    background<span class="token operator">-</span>color<span class="token operator">:</span> yellow<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//背景颜色为黄色</span>    display<span class="token operator">:</span> block<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将a链接以块元素的样式显示</span>    color<span class="token operator">:</span> #<span class="token number">999</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置字体的颜色</span>    padding<span class="token operator">:</span> 5px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//周围加上5像素的填充</span> <span class="token punctuation">}</span></code></pre><p>第四步：设置ul下所有的第一层的li在一行中显示</p><pre class=" language-java"><code class="language-java">#nav<span class="token operator">></span>li<span class="token punctuation">{</span> <span class="token keyword">float</span><span class="token operator">:</span> left<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//浮空左对齐</span><span class="token punctuation">}</span></code></pre><p>第五步：设置二级菜单全部隐藏</p><pre class=" language-java"><code class="language-java">#nav ul<span class="token punctuation">{</span>    display<span class="token operator">:</span> none<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将里面的所有内容隐藏且不占位置</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//顺便一提：visibility: hidden;隐藏的元素仍然是占据空间</span></code></pre><p>第六步：设置当鼠标停留的时候的样式</p><pre class=" language-java"><code class="language-java">#nav a<span class="token operator">:</span>hover<span class="token punctuation">{</span>    background<span class="token operator">-</span>color<span class="token operator">:</span> red<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//背景设置为红色</span>    color<span class="token operator">:</span> white<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字体设置为白色</span><span class="token punctuation">}</span></code></pre><p>第七步：当鼠标滑过li的时候,那么li下的所有的ul显示 </p><pre class=" language-java"><code class="language-java">#nav<span class="token operator">></span>li<span class="token operator">:</span>hover ul<span class="token punctuation">{</span>            display<span class="token operator">:</span> block<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示出来</span>        <span class="token punctuation">}</span></code></pre><p>全部代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token comment" spellcheck="true">/* 第一步:去除列表的样式 */</span>        <span class="token selector">ul</span><span class="token punctuation">{</span>            <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 第三步:去除ul默认的内填充40 */</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 第二步-去除a默认的样式 */</span>        <span class="token selector">a</span><span class="token punctuation">{</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 第四步:设置a的样式 */</span>        <span class="token selector"><span class="token id">#nav</span> a</span><span class="token punctuation">{</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#999</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">250</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#999</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 第五 - 设置ul下所有的第一层的li在一行中显示 */</span>        <span class="token selector"><span class="token id">#nav</span>>li</span><span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 第六 - 设置二级菜单全部隐藏 */</span>        <span class="token selector"><span class="token id">#nav</span> ul</span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 第七 - a:hover */</span>        <span class="token selector"><span class="token id">#nav</span> a<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 第八:当鼠标滑过li的时候,那么li下的所有的ul显示 */</span>        <span class="token selector"><span class="token id">#nav</span>>li<span class="token pseudo-class">:hover</span> ul</span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>outer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第一阶段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Java基础<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>OOP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>高级特性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第二阶段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javaweb实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html5 </tag>
            
            <tag> Visual </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流 (一)</title>
      <link href="/2019/12/17/io-liu-yi/"/>
      <url>/2019/12/17/io-liu-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="File文件夹的基本操作："><a href="#File文件夹的基本操作：" class="headerlink" title="File文件夹的基本操作："></a>File文件夹的基本操作：</h2><pre class=" language-java"><code class="language-java">File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意：File类只能操作文件本身，但不能操作文件的内容</span><span class="token comment" spellcheck="true">//"dir"是参数，是待操作的文件或文件夹的路径</span></code></pre><ul><li><p>创建文件夹，返回Boolean类型</p><pre class=" language-java"><code class="language-java">dir<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>文件夹下创建文件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//File中的构造方法</span>File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span><span class="token string">"d.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数一：文件夹，参数二：文件名</span></code></pre></li><li><p>创建多层文件夹</p><pre class=" language-java"><code class="language-java">File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d1/d2/d3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>删除多层文件夹的最后一个</p><pre class=" language-java"><code class="language-java">File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d1/d2/d3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里只删除/d3</span></code></pre></li><li><p>循环遍历文件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.创建文件夹所在的路径</span>File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.用listFiles来获取文件夹下所有的文件夹和文件</span>File<span class="token punctuation">[</span><span class="token punctuation">]</span> fs <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.遍历数组</span><span class="token keyword">for</span><span class="token punctuation">(</span>File tempF<span class="token operator">:</span>fs<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断是否是文件</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tempF<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取文件名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tempF<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"是文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tempF<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取文件的名字</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tempF<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"是文件夹"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用到的方法------------------</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取文件名</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断是否是文件夹</span>f<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断时否是文件</span>f<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取f目录下所有的文件与文件夹名，返回一个File数组</span></code></pre></li><li><p>使用递归的方式，将文件夹下所有的文件及子文件遍历出来</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断是文件夹还是文件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果是文件夹切里面有东西的话，就遍历文件的次级目录</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"文件夹"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//进入文件夹的再遍历一遍</span>            File<span class="token punctuation">[</span><span class="token punctuation">]</span> fs <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>length<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>File f<span class="token operator">:</span>fs<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">test</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用到的方法----------------</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取当前的绝对路径</span></code></pre></li><li><p>文件的长度</p><pre class=" language-java"><code class="language-java">f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>判断文件是否存在</p><pre class=" language-java"><code class="language-java">f<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><ul><li>IO流使用来操作文件内容的技术，<strong>IO流有输入/输出，这里的输入与输出都是相对于程序来说的</strong></li><li>I  input输入流：向程序输入数据，一般是从文件中读取内容到程序中</li><li>O output输出流：向程序外部输出数据，一般是将数据写入到文件中</li></ul><h3 id="IO流的用途"><a href="#IO流的用途" class="headerlink" title="IO流的用途"></a>IO流的用途</h3><ul><li>读写文件</li><li>文件的上传与下载</li><li>解决文件乱码</li><li>框架的一些底层技术应用</li></ul><h3 id="IO流的分类"><a href="#IO流的分类" class="headerlink" title="IO流的分类"></a>IO流的分类</h3><p><strong>1.按照数据类型的分类</strong></p><ul><li>字节流：二进制，以字节为单位，因为所有的文件可以转为二进制，所以字节流对任何文件都可以操作，图片，音乐，视频，压缩包等，是通用的</li><li>字符流：一般用来操作文本类型的文档，操作中文字符的传输</li></ul><p><strong>2.按照数据流向</strong></p><ul><li><strong>输入流</strong><ul><li>字节输入流（<code>InputStream</code>，抽象类）：每次读取一个字节；<ul><li><code>InputStream</code>的子类：<code>FileInputStream</code></li></ul></li><li>字节缓冲输入流（<code>BufferInputStream</code>）：带缓冲区的字节输入流，效率比字节流高</li><li>字符输入流（<code>InputStreamReader</code>）：每次读取一个字符</li><li>字符缓冲输入流（<code>BufferReader</code>）：带缓冲的字符输入流</li></ul></li><li><strong>输出流</strong><ul><li>字节输出流（<code>OutputStream</code>，抽象类）：每次输出一个字节；<ul><li><code>OutputStream</code>的子类：<code>FileOutputStream</code></li></ul></li><li>字节缓冲输出流（<code>BufferedoutputStream</code>）:带缓冲区的字节输出流，效率比字节流更高</li><li>字符输出流（<code>OutputStreamWriter</code>）:一次输出一个字符</li><li>字符缓冲输出流（<code>BufferedWriter</code>）：带缓冲去的字节输出流，效率比字节流更高</li></ul></li></ul><p><strong>注意：</strong></p><ul><li>带缓冲区比不带缓冲区的效率更高</li><li>字节缓冲流不能直接操作文件，必须包装字节流，通过字节流进行操作</li></ul><h3 id="IO流的使用流程"><a href="#IO流的使用流程" class="headerlink" title="IO流的使用流程"></a>IO流的使用流程</h3><p><strong>字节输出流：</strong><code>OutputStream</code>（程序—–&gt;外界）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建文件对象</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"word.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向word写东西，由程序向外输出内容</span><span class="token comment" spellcheck="true">//OutputStream是抽象类，不能直接创建对象,需要通过子类</span>OutputStream outPS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果要是实现向文档中追加数据内容，而不是覆盖原数据</span><span class="token comment" spellcheck="true">//FileOutputStream构造方法可以传入两个参数，第一个为File,第二个参数为写入数据的时候是否在文件末尾追加内容</span><span class="token comment" spellcheck="true">//默认的false表示不追加，覆盖原内容</span>outPS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//向文件中写数据</span><span class="token comment" spellcheck="true">//在向文件写数据有三种实现方法</span><span class="token comment" spellcheck="true">//1.字节    2.字节数组    3.将字节数组中的第off+1个元素开始的len个数据，顺序写到次输出流中</span><span class="token comment" spellcheck="true">//第一种方法：字节-------------</span>outPS<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//会将数字转成字符形式存入</span><span class="token comment" spellcheck="true">//第二种：通过字节数组---------</span>String str <span class="token operator">=</span> <span class="token string">"你好啊！"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将字符串转换为字节数组</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将字节数组写入文件中</span>outPs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第三种：有了字节数组，但只需要字节数字指定位置的一段</span>outPS<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从第二位开始哦，截取4个字节写入</span><span class="token comment" spellcheck="true">//输入输出流关闭</span>outPS<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>字节输入流</strong>：<code>InputStream</code>（外界—–&gt;程序）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建文件对象</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"word.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用子类创建InputStream对象</span>InputStream inPS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//read读取</span><span class="token comment" spellcheck="true">//1.每次读取一个字节，一直读到最后剩下全部返回‐1</span><span class="token comment" spellcheck="true">//2.读取为字节数组 </span><span class="token comment" spellcheck="true">//3.读全部，返回int，字符在ascii表中对应的十进制数字</span><span class="token comment" spellcheck="true">//方法一:每次读取一个字节-----</span><span class="token comment" spellcheck="true">//循环读取</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> inPS<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方法二:没次读取一个字节数组</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bytes</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//长度为4的字节数组</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在read()方法中，如果参数使用了byte数组，方法的返回值为整型</span><span class="token comment" spellcheck="true">//返回的是数组读取到的有效字节的个数，如果一个都没有读取到就返回-1</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>inPS<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Sysoutem<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//new String是将bytes数组转换为字符串，从0开始转船，转换到读取的长度</span>    <span class="token comment" spellcheck="true">//如果不使用len来控制长度的话，bytes会在没用到的下标对应的元素上，使用上一次操作的元素</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方法三:读取全部---------</span><span class="token comment" spellcheck="true">//直接获取文件的字节数inPS.available(); </span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>inPS<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>inPS<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭流</span>inPS<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 阶段小结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流（二）</title>
      <link href="/2019/12/17/io-liu-er/"/>
      <url>/2019/12/17/io-liu-er/</url>
      
        <content type="html"><![CDATA[<h2 id="字节流复制文件"><a href="#字节流复制文件" class="headerlink" title="字节流复制文件"></a>字节流复制文件</h2><h3 id="1-每次复制1字节"><a href="#1-每次复制1字节" class="headerlink" title="1.每次复制1字节"></a>1.每次复制1字节</h3><pre class=" language-java"><code class="language-java">InputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"要复制的文件的路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>OutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"复制到的路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//循环读写</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//关闭流，先用的后关</span>fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-使用字节数组"><a href="#2-使用字节数组" class="headerlink" title="2.使用字节数组"></a>2.使用字节数组</h3><pre class=" language-java"><code class="language-java">InputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"要复制的文件的路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>OutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"复制到的路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意，如果这里不指定len，会出现乱码问题</span><span class="token punctuation">}</span>fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>为什么不指定打印的len会出现乱码问题？</p><p>答：假如文档中的是中文的话，复制过来就会出现乱码问题，GBK中一个中文对应两个字符，使用字节流会把中文拆分成对应的字节后，再传输。但是因为每次都只传输1024个字符（期间的数字，空格等算一个字符），汉字从文件中拆分成字符，然后再写入，将字符组合成中文的时候，可能会出现字符拼接位置不对，造成乱码。</p><h2 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h2><p><strong>字节缓冲流操作文件，缓冲流不能直接访问文件，必须要借助字节流访问！</strong></p><pre class=" language-java"><code class="language-java">InputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"操作的文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建字节数组</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>fis<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将文件读到数组中</span>bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关流</span>bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="字节缓冲流复制文件"><a href="#字节缓冲流复制文件" class="headerlink" title="字节缓冲流复制文件"></a>字节缓冲流复制文件</h2><h3 id="1-使用带缓冲区的字节流，每次1字节复制文件"><a href="#1-使用带缓冲区的字节流，每次1字节复制文件" class="headerlink" title="1.使用带缓冲区的字节流，每次1字节复制文件"></a>1.使用带缓冲区的字节流，每次1字节复制文件</h3><pre class=" language-java"><code class="language-java">BufferedInputStream bis <span class="token operator">=</span>     <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"要复制的文件路径"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BufferedOutputStream bos <span class="token operator">=</span>     <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"复制过去的路径"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//循环读写</span><span class="token keyword">int</span> b<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//关流</span>bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-使用带缓冲取得字节流，使用字节数组复制文件"><a href="#2-使用带缓冲取得字节流，使用字节数组复制文件" class="headerlink" title="2.使用带缓冲取得字节流，使用字节数组复制文件"></a>2.使用带缓冲取得字节流，使用字节数组复制文件</h3><pre class=" language-java"><code class="language-java">BufferedInputStream bis <span class="token operator">=</span>     <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"要复制的文件路径"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BufferedOutputStream bos <span class="token operator">=</span>     <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"复制过去的路径"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//循环读写</span><span class="token comment" spellcheck="true">//使用字节数组</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//关流</span>bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>带缓冲区的效率高区不带缓冲区的，字节数组的效率高于单字节复制的效率</strong></p><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><ul><li>字符输入流：<code>InputStreamReader</code>（外界—&gt;程序）</li><li>字符输出流：<code>OutputStreamWriter</code>（程序—&gt;外界）</li></ul><p>在使用字符流时，也需要经过<code>FileInputStream</code>来对文件进行操作</p><h2 id="字符输入流InputStreamReader"><a href="#字符输入流InputStreamReader" class="headerlink" title="字符输入流InputStreamReader"></a>字符输入流<code>InputStreamReader</code></h2><pre class=" language-java"><code class="language-java">InputStreamReader isr <span class="token operator">=</span>     <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token function">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"操作的文件路径"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//字符流中的read与字节流一样，也有三种参数形式</span><span class="token comment" spellcheck="true">//1.一次读一个字符</span><span class="token comment" spellcheck="true">//2.一次读一个字符数组</span><span class="token comment" spellcheck="true">//3.一次读一个字符数组，指定开始位置与长度</span><span class="token comment" spellcheck="true">//=====每次读取一个字符=============</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int型强转成char</span><span class="token punctuation">}</span>isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//=====每次读取一个字符数组==========</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//=====每次读取一个字符数组，指定数组的位置与长度=======</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="字符输出流OutputStreamWriter"><a href="#字符输出流OutputStreamWriter" class="headerlink" title="字符输出流OutputStreamWriter"></a>字符输出流<code>OutputStreamWriter</code></h2><pre class=" language-java"><code class="language-java">OutputStreamWriter osw <span class="token operator">=</span>     <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"操作的文件路径"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向文件中写入字符</span>osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'哼'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清空缓冲区</span>osw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//直接写入字符串</span>String str <span class="token operator">=</span> <span class="token string">"我是字符串"</span><span class="token punctuation">;</span>osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//也可以指定位置与长度</span>osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ASCII码</span><span class="token comment" spellcheck="true">//关闭流</span>osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="字符流设置编码格式"><a href="#字符流设置编码格式" class="headerlink" title="字符流设置编码格式"></a>字符流设置编码格式</h2><p><strong>常见的编码格式</strong></p><ul><li>Unicode：支持世界上所有语言的编码，UTF-8，UTF-16</li></ul><ul><li>GBK：简体中文</li><li>BIG5：繁体中文</li><li>ASCII：美国国家信息标准码</li><li>ISO-8859-1：拉丁码</li></ul><p>在文件流中，使用相同的码表进行编码和解码才不会出现乱码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设置写入的编码</span>OutputStreamWriter osw <span class="token operator">=</span>     <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"路径"</span><span class="token punctuation">,</span><span class="token string">"编码格式"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"哈哈哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>osw<span class="token punctuation">.</span>close<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置读取得编码格式</span>InputStreamReader isr <span class="token operator">=</span>     <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"路径"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"编码格式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时，用这种方法读取，都会输出正常文字，只要保证输入输出的编码格式保持一致</span></code></pre><h2 id="字符输入输出流（FileReader，FileWriter）"><a href="#字符输入输出流（FileReader，FileWriter）" class="headerlink" title="字符输入输出流（FileReader，FileWriter）"></a>字符输入输出流（<code>FileReader</code>，<code>FileWriter</code>）</h2><ul><li><code>FileReader</code>：<code>inputStreamReader</code>的子类</li><li><code>FileWriter</code>：<code>OutputStreamWriter</code>的子类</li></ul><h3 id="FileReader，字符输入流"><a href="#FileReader，字符输入流" class="headerlink" title="FileReader，字符输入流"></a><code>FileReader</code>，字符输入流</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//FileReader不能指定编码格式</span>FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"文件路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">,</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="FileWriter-字符输出流"><a href="#FileWriter-字符输出流" class="headerlink" title="FileWriter,字符输出流"></a><code>FileWriter</code>,字符输出流</h3><pre class=" language-java"><code class="language-java">FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="字符缓冲输入输出流（重点）"><a href="#字符缓冲输入输出流（重点）" class="headerlink" title="字符缓冲输入输出流（重点）"></a>字符缓冲输入输出流（重点）</h2><h3 id="BufferedFileWriter，字符缓冲输出流，该流可以一次读取一行数据的方法"><a href="#BufferedFileWriter，字符缓冲输出流，该流可以一次读取一行数据的方法" class="headerlink" title="BufferedFileWriter，字符缓冲输出流，该流可以一次读取一行数据的方法"></a><code>BufferedFileWriter</code>，字符缓冲输出流，该流可以一次读取一行数据的方法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//写数据，BufferedWriter构造方法参数需要字符输出流</span><span class="token comment" spellcheck="true">//第一步：创建文件对象</span>File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二步：创建字节流，字节流是最基本的IO流</span>OutputStream ops <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第三步：使用字节流，创建字符流</span>OutputStreamWriter osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>ops<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第四步：使用字符流创建字符缓冲流</span>BufferedFileWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedFileWriter</span><span class="token punctuation">(</span>osw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//合并的写法</span>BufferedFileWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedFileWriter</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"路径"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向文件写入数据</span>String s1 <span class="token operator">=</span><span class="token string">"世界那么大"</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span><span class="token string">"钱包那么小"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向文件写入数据</span>bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文档结果---世界那么大钱包那么小</span><span class="token comment" spellcheck="true">//两句合并到了一起，没有进行换行</span>bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在两句话中插入，实现换行</span>bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="BufferedFileReader字符缓冲输入流，该流可以一次读取一行数据"><a href="#BufferedFileReader字符缓冲输入流，该流可以一次读取一行数据" class="headerlink" title="BufferedFileReader字符缓冲输入流，该流可以一次读取一行数据"></a><code>BufferedFileReader</code>字符缓冲输入流，该流可以一次读取一行数据</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//写数据。BufferedFileReader 字符缓冲输入流</span><span class="token comment" spellcheck="true">//创建该对象与创建字符缓冲输出流一样，也需要从字节流开始创建</span>BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>          <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"路径"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开始读取，读取一行，如果没有，会输出null</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//循环读取</span>String s <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>字符缓冲输出输入流读写效率非常高，一般读取文档都是使用这两个文件流</p>]]></content>
      
      
      <categories>
          
          <category> 阶段小结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git入门笔记</title>
      <link href="/2019/12/17/git-ru-men-bi-ji/"/>
      <url>/2019/12/17/git-ru-men-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="Git命令使用"><a href="#Git命令使用" class="headerlink" title="Git命令使用"></a>Git命令使用</h2><ol><li><p>初始化git仓库</p><pre><code>git init</code></pre></li><li><p>查看当前git仓库状态的命令</p><pre><code>git status</code></pre></li><li><p>将<strong>工作区</strong>的改变提交到<strong>暂存区</strong>中</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//提交某个文件</span>git add <span class="token number">001</span><span class="token punctuation">.</span>txt<span class="token comment" spellcheck="true">//提交所有的文件</span>git add <span class="token punctuation">.</span></code></pre></li><li><p>再次查看git仓库的状态</p><pre><code>git status</code></pre></li><li><p>最终提交到版本库中</p><pre class=" language-java"><code class="language-java">git commit <span class="token operator">-</span>m <span class="token string">"干嘛了，做了哪些改变"</span><span class="token comment" spellcheck="true">//m: message</span></code></pre></li><li><p>再次查看git仓库的状态</p><pre><code>git status</code></pre></li></ol><h2 id="主分支和从分支"><a href="#主分支和从分支" class="headerlink" title="主分支和从分支"></a>主分支和从分支</h2><p>默认的分支-主分支master-项目经理</p><ul><li>查看所有分支的名称</li></ul><pre><code>git branch</code></pre><ul><li>新建一个分支</li></ul><pre><code>git branch test01</code></pre><ul><li>切换分支到test01</li></ul><pre><code>git checkout test01 </code></pre><p><strong>开发中的任务不能直接在master分支下进行</strong></p><ul><li><p>新建文件test02.txt</p><ul><li><p>分别执行add和commit</p></li><li><p>git status</p></li></ul></li><li><p>切换到master分支来看test01.txt文件是否存在</p></li><li><p>补充</p><p>删除本地分支</p><pre class=" language-java"><code class="language-java">git branch <span class="token operator">-</span>d test01<span class="token comment" spellcheck="true">//删除test01分支</span></code></pre><p>查看日志</p><pre class=" language-java"><code class="language-java">git lg</code></pre></li></ul><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><ul><li><p>切换到master</p><pre><code>git checkout master</code></pre></li><li><p>将test01合并到master</p><pre><code>git merge test01</code></pre></li></ul><ul><li><p>检查状态</p><pre><code>git status</code></pre></li></ul><h2 id="分支冲突"><a href="#分支冲突" class="headerlink" title="分支冲突"></a>分支冲突</h2><p>当两个分支去操作同一个文件的位置，会造成分支的冲突</p><p><img src="https://article-1300910484.cos.ap-shanghai.myqcloud.com/git%E5%85%A5%E9%97%A8/1.png" alt=""></p><p>如何解决呢？ —–组长的任务</p><ul><li>master-&gt;hello.java-&gt;3行</li><li>test01——–&gt;修改hello.java第三行</li><li>test02———&gt;修改hello.java第三行</li><li>test01-&gt;合并到-&gt;master-&gt;可以自动进行合并到</li><li>test02-&gt;合并到-&gt;master-&gt;需要解决冲突<ul><li>在master分支下打开hello.java-&gt;手动删除重复的部分，add，commit</li></ul></li></ul><h1 id="本地上传"><a href="#本地上传" class="headerlink" title="本地上传"></a>本地上传</h1><ul><li><p>在本地仓库中新建了一个文件first.txt</p></li><li><p>将本地仓库中的update提交到了远程仓库的master分支</p><p>几乎不会用到这个操作的，本地的属于自己的分支应该提交到远程的从分支上，然后由组长在远程仓库中进行合并操作</p><pre class=" language-java"><code class="language-java">git push origin master</code></pre></li><li><p>注意：空目录是不会推送的</p></li></ul><h2 id="远程创建仓库分支"><a href="#远程创建仓库分支" class="headerlink" title="远程创建仓库分支"></a>远程创建仓库分支</h2><ul><li><p>起点master  创建分支test01</p></li><li><p>本地创建分支并且切换到test01 - &gt; test01.txt</p></li><li><p>本地从分支推送到远程的从分支test01</p><pre class=" language-java"><code class="language-java">git push origin test01</code></pre></li></ul><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><ul><li><p>组长重新见一个仓库，然后再远程新建分支test01、test02、test03、test04、test05；</p></li><li><p>A组员在本地git clone仓库地址，进入本地仓库目录（.git隐藏目录所在的目录）；</p></li><li><p>A组员继续在本地分支test02-[master-test02]；</p></li><li><p>A组员继续在本地新建一个本地分支，文件名不要重复[文件名]</p></li><li><p>A组员推送本地test02分支到远程的分支test02</p><p>注意：本地的分支如test02，一定要与远程仓库新建的分支名字保持一致</p></li><li><p>A组员的目的：让组长知道有新的提交，需要在码云网站（定位到自己的分支）</p></li></ul><h2 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h2><p>组员本地的从分支需要拉取远程仓库的master分支的内容</p><pre><code>git pull origin master</code></pre><p>1</p>]]></content>
      
      
      <categories>
          
          <category> javaweb实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 码云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的异常</title>
      <link href="/2019/12/15/java-zhong-de-yi-chang/"/>
      <url>/2019/12/15/java-zhong-de-yi-chang/</url>
      
        <content type="html"><![CDATA[<h2 id="异常的概念"><a href="#异常的概念" class="headerlink" title="异常的概念"></a>异常的概念</h2><p>不按照原定计划发生的状况</p><p>程序中一旦发生异常，后面的代码将会停止执行</p><p>会在控制台输出错误信息，在错误位置中断程序，不会向下继续执行</p><h2 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h2><p>总类：<strong>Throwable：错误和异常的超类（父类），下面分为两类</strong></p><ul><li><p><strong>Error</strong>：java中的错误，一般是运行环境（JAR包，依赖）出现了问题，是系统级别的问题，我们无法解决</p></li><li><p><strong>Excpetion</strong>：异常，预料之外但是可以解决的问题</p><p>异常分为两类</p><ul><li><strong>编译异常：</strong>编译的时候发生的异常（编译器中出现红线）</li><li><strong>运行异常（RuntimeException）</strong>：程序编译通过，但是运行时报错的异常（运行时会在控制台报错） </li><li>常见的运行异常：<ul><li>ArithmeticException：算术异常</li><li>MissingResourceException：资源丢失异常</li><li>ClassNotFoundException：找不到类</li><li>NullPointerExpection：空指针异常</li><li>IllegalArgumentException：非法参数异常</li><li>ArrayIndexOutOfBoundsException：数组下标越界异常</li><li>UnkownTypeException：未知类型异常</li></ul></li></ul></li></ul><h2 id="Throw关键字抛出异常："><a href="#Throw关键字抛出异常：" class="headerlink" title="Throw关键字抛出异常："></a>Throw关键字抛出异常：</h2><p>自己制造一个异常甩出去，防止程序发生其他不在意料中的情况</p><p>格式：throw new异常信息，使用来手动制造一个异常的；当需要指定运行异常时，可以砸发生遗产给的时候使用该方法自己抛出一个异常</p><pre class=" language-java"><code class="language-java">Scanner key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> age <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不得小于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="异常的处理："><a href="#异常的处理：" class="headerlink" title="异常的处理："></a>异常的处理：</h2><h3 id="1-throws关键字抛出异常："><a href="#1-throws关键字抛出异常：" class="headerlink" title="1.throws关键字抛出异常："></a>1.throws关键字抛出异常：</h3><p>将代码中可能会发生的异常抛出给上级（调用者）处理，抛出异常后，如果其他代码调用了这个方法，那么调用的那句代码就会接收打抛出的异常，需要调用者继续抛出或者处理。<strong>如果是加在main方法后，表示交给JAVA虚拟机处理。</strong></p><h3 id="2-try-catch处理异常："><a href="#2-try-catch处理异常：" class="headerlink" title="2.try  catch处理异常："></a>2.try  catch处理异常：</h3><p>自己将可能发生的异常捕获，在代码块中解决异常；如果发生了可能会发生的哪个异常，执行相应的操作</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//可能出现异常的代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span>（异常的类型<span class="token number">1</span>）<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//发生异常后继续执行的操作</span>    <span class="token comment" spellcheck="true">//对异常的处理</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常的类型<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//发生异常后继续执行的操作</span>    <span class="token comment" spellcheck="true">//对异常的处理</span><span class="token punctuation">}</span></code></pre><p>多个catch时，会按照顺序一个一个查找异常，匹配到第一个异常时执行catch代码块中的代码，后面的catch代码块将不会再执行</p><p><strong><em>注意：</em></strong></p><ul><li>当一个异常同时可以被多个catch捕获时，会采用就近原则，会选择与这个异常最相近的catch去执行；</li><li>当多个catch语句中的异常是父子关系的话，应该讲子异常写在前面，父异常写在后面，即：范围小的异常写在前面，范围大的异常写在后面</li></ul><h3 id="3-try-catch-finally代码块"><a href="#3-try-catch-finally代码块" class="headerlink" title="3.try catch finally代码块"></a>3.try catch finally代码块</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要执行的可能会发生异常的代码块</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常的类型<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//发生异常后继续执行的操作</span>    <span class="token comment" spellcheck="true">//对异常的处理</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在try catch执行完毕后，一定会执行的代码</span>    <span class="token comment" spellcheck="true">//一般用来关闭资源，断开连接</span>    <span class="token comment" spellcheck="true">//我们使用了某个资源，最后一定要关闭</span>    <span class="token comment" spellcheck="true">//如果发生异常导致程序中断，但是在finally中关闭，就不影响资源的关闭</span><span class="token punctuation">}</span></code></pre><p><strong>try：</strong>表示尝试执行的代码块（必须有）</p><p><strong>catch：</strong>如果尝试执行代码块时，发生异常，catch就会捕获异常信息并处理（必须有）</p><p><strong>finally：</strong>无论异常是否发生都会执行的代码块（根据需要，不是必须）</p><p><strong>测试题：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>finnaly<span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出语句</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//====结果====</span><span class="token number">6</span><span class="token number">6</span><span class="token number">6</span><span class="token comment" spellcheck="true">// * try..catch..finally同时存在时，无论如何finally都会执行</span><span class="token comment" spellcheck="true">// * 如果try..catch中有return语句，那么在return之前都会执行finally</span><span class="token comment" spellcheck="true">//所以不管有没有报错，最后都会执行return 6返回一个6</span></code></pre><h3 id="注意：有四种情况，finally代码块不会执行"><a href="#注意：有四种情况，finally代码块不会执行" class="headerlink" title="注意：有四种情况，finally代码块不会执行"></a><strong>注意：有四种情况，finally代码块不会执行</strong></h3><p>1.finally代码块中有异常，会执行到异常语句后停止执行</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"try代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStacktrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//算术异常</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这里就不会执行finally里的输出语句了</span></code></pre><p>2.在try代码块中强制关闭程序，使用System.exit(0);</p><p>3.程序所在的线程死亡</p><p>4.CPU关闭,断电</p><h2 id="自定义异常："><a href="#自定义异常：" class="headerlink" title="自定义异常："></a>自定义异常：</h2><p> 只是自定义异常的名字，处理异常的时候可以抛出自己自定义的异常，能让程序员跟快速的识别异常的位置和原因</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第一步：写一个类，继承Exception类，并继承该类的方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotHumanException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**构造方法**/</span>    <span class="token keyword">public</span> <span class="token function">NotHumanException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第二步：抛出自己定义的异常</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotHumanException</span><span class="token punctuation">(</span><span class="token string">"非人类异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 阶段小结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOP面向对象</title>
      <link href="/2019/12/13/oop-mian-xiang-dui-xiang-zong-jie/"/>
      <url>/2019/12/13/oop-mian-xiang-dui-xiang-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="一、类与对象"><a href="#一、类与对象" class="headerlink" title="一、类与对象"></a>一、类与对象</h2><h3 id="1-1-什么是对象"><a href="#1-1-什么是对象" class="headerlink" title="1.1 什么是对象"></a>1.1 什么是对象</h3><p>对象是一个抽象的概念，所有的类都继承与Object类，Object是java中所有类的父类(超类) </p><p>一切皆对象/万物皆对象，每一个具体的东西，人，动物等等所有的都是对象，都有动 态和静态的特征，是具体的具象化的有实体的 </p><p>对象的描述：静态和动态 </p><p>人：</p><ul><li>静态：身高，体重，性别。。。。</li><li>动态：行走，奔跑，说话。。。。</li></ul><h3 id="1-2-什么是类"><a href="#1-2-什么是类" class="headerlink" title="1.2 什么是类"></a>1.2 什么是类</h3><p>同一类事物的统称，比如动物类，机器类，汽车类，人类等等 </p><p>类和对象的关系就是抽象和具体的关系 </p><p>公交车—&gt;718路车，饼干——&gt;小熊饼干，男朋友—–&gt;小王</p><h2 id="二、类的成员变量和成员方法"><a href="#二、类的成员变量和成员方法" class="headerlink" title="二、类的成员变量和成员方法"></a>二、类的成员变量和成员方法</h2><p>每一个类中都有成员变量和成员方法，成员变量就是类的属性，静态特征。成员方法是 类的行为，是动态特称；每一个抽象的类别和具体的实体对象都会有静态和动态特征 </p><p><strong>变量：用来存储数据，对应静态特征</strong> </p><p><strong>方法：实现某种功能，对应动态特征</strong></p><h3 id="2-1成员变量"><a href="#2-1成员变量" class="headerlink" title="2.1成员变量"></a>2.1成员变量</h3><p><strong>局部变量：</strong>在成员方法内部定义的变量，他的作用范围只在方法中有效，<em>局部变量在使用的时候必须进行赋值或者初始化，否则会在编译期报错</em></p><p><strong>成员变量（全局变量）</strong>：在类中定义的变量，他的作用范围在整个类中有效，<em>在定义的时候可以不进行初始化操作，在使用的时候不赋值会报错，系统会自动赋值为数据的类型的默认值</em></p><h3 id="2-2成员方法"><a href="#2-2成员方法" class="headerlink" title="2.2成员方法"></a>2.2成员方法</h3><p>成员方法有五要素：访问修饰符，返回值类型，方法名，方法参数列表，方法代码块 </p><p>方法的调用，一般需要使用类的对象来调用方法，先new对象，再用 <code>对象.方法名</code> 的方 式来调用方法<br><strong>调用方法需要注意：调用方法的时候，一定要注意类中的方法需要的参数，并且一一对 应，否则不能调用方法</strong></p><h3 id="2-3构造方法"><a href="#2-3构造方法" class="headerlink" title="2.3构造方法"></a>2.3构造方法</h3><p>构造方法    名字与类同名，没有返回值，在类中起到<em>对成员变量初始化</em> 的作用</p><p>构造方法分为无参构造方法跟有参构造方法，有参与无参使用的是方法的重载特性</p><p>无参构造方法是系统默认调用的构造方法，无参的构造方法是系统默认使用的，并且不需要在类中定义出无参构造方法</p><p>如果要使用有参构造方法，必须在类中定义出来有参构造方法，有参构造方法的参数就 是类的成员变量</p><h3 id="2-4-this关键字"><a href="#2-4-this关键字" class="headerlink" title="2.4 this关键字"></a>2.4 this关键字</h3><p>this关键字在本类中使用可以直接调用本类成员变量和成员方法</p><p>this()一般情况下能够代替构造方法使用来创建对象 </p><p>小技巧：在无参的构造方法中调用有参构造方法直接使用  this.构造方法名(方法参数)</p><h3 id="2-5-创建对象"><a href="#2-5-创建对象" class="headerlink" title="2.5 创建对象"></a>2.5 创建对象</h3><p>用new创建一个对象：<code>Human h = new Human();</code></p><p><code>Human</code>：引用的数据类型</p><p><code>h</code>：对象的引用</p><p><code>new human()</code>：类的实例化</p><h2 id="三、继承（-extends-）"><a href="#三、继承（-extends-）" class="headerlink" title="三、继承（ extends ）"></a>三、继承（ extends ）</h2><h3 id="3-1-什么是继承"><a href="#3-1-什么是继承" class="headerlink" title="3.1 什么是继承"></a>3.1 什么是继承</h3><p>java中的继承，指子类继承父类，会继承父类所有的非私有的属性和方法 </p><p>继承的关键字<code>Extends</code>—&gt;<em>public class 子类extends 父类{}</em> </p><p><strong>如何设计父类？</strong> 将子类共有的特点(静态的，属性)和行为(动态的，方法)抽离出 来，定义成父类 </p><p><strong>如何设计子类？</strong>将子类特有的特点和行为定义在子类中，其他的特点和行为使用父类中的</p><p><strong>子类中，无论是有参构造器还是无参构造器，默认都会调用父类的无参构造器</strong></p><p><strong>构造方法，先调用父类构造方法，在调用子类构造方法</strong></p><p>例子如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认调用父类的无参构造方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认调用父类的无参构造方法</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>继承特点</strong>：只支持单继承，多重继承</p><h3 id="3-2-super关键字"><a href="#3-2-super关键字" class="headerlink" title="3.2 super关键字"></a>3.2 super关键字</h3><p>super是指向父类的引用</p><p>如果构造方法没有显示地调用父类的构造方法，那么编译器会自动为它加上一个默认的super()方法调用。</p><p>如果父类由没有默认的无参构造方法，编译器就会报错，super()语句必须是构造方法的第一个子句子。</p><h2 id="四、重写（覆盖）override和重载overload"><a href="#四、重写（覆盖）override和重载overload" class="headerlink" title="四、重写（覆盖）override和重载overload"></a>四、重写（覆盖）override和重载overload</h2><h3 id="4-1-重写（覆盖）override"><a href="#4-1-重写（覆盖）override" class="headerlink" title="4.1 重写（覆盖）override"></a>4.1 重写（覆盖）override</h3><p>发生在子类和父类的关系中，子类继承父类，当子类中存在和父类方法名，方 法参数相同的方法时，就不再调用父类的方法，而是直接调用子类的方法，这种情况下父类的方法会被子类的方法覆盖即子类重写了父类的方法 </p><p>子类和父类中，<strong>方法名相同，参数列表相同，返回值类型相同</strong></p><p>访问修饰符不能比原方法更加严格</p><p>public &gt; protected &gt; default &gt; private</p><h3 id="4-2-重载overload"><a href="#4-2-重载overload" class="headerlink" title="4.2 重载overload"></a>4.2 重载overload</h3><p><strong>方法名相同，但参数列表不同（类型，顺序不同，与参数名无关）</strong><br>重载与方法的访问修饰符以及返回值类型都无关</p><p>方法的重载与返回值类型和访问修 饰符无关</p><p>方法名一样参数一 致时，即使是返  回值不同，也会报错没有构成方法重载，可以看出重载与返回值无关</p><h2 id="五、访问修饰符"><a href="#五、访问修饰符" class="headerlink" title="五、访问修饰符"></a>五、访问修饰符</h2><p><code>private</code>，<code>proected</code>，<code>default</code>，<code>private</code></p><ol><li>类的每一个成员（包括成员变量、方法和构造器）都有一个访问修饰符，用来判断谁 可以访问该成员。访问修饰符允许我们在设计程序的时候，就考虑到谁可以访问一个对 象的不同属性和行为 </li><li>访问修饰符可以用来修饰变量和方法</li></ol><p><img src="https://article-1300910484.cos.ap-shanghai.myqcloud.com/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1.png" alt=""></p><h2 id="六、OOP-多态"><a href="#六、OOP-多态" class="headerlink" title="六、OOP-多态"></a>六、OOP-多态</h2><h3 id="6-1-多态的使用"><a href="#6-1-多态的使用" class="headerlink" title="6.1 多态的使用"></a>6.1 多态的使用</h3><p>多态是指一种类型的多种形态（同种类型以不同的形态展示出来），在java中的表现就 是同一个对象，调用相同方法，执行不同的操作；方法的重载就是多态的表现。</p><p><strong>多态是和继承一起使用的，实现多态的话，就需要继承同一个父类</strong></p><p><strong>多态实现的三个步骤:</strong>   </p><ol><li>子类重写父类的方法  </li><li>子类对象赋给父类对象   </li><li>通过父类对象调用方法，执行的是子类的方法(方法的重载)</li></ol><p><strong>多态的向上转型</strong></p><p>使用子类创建父类的对象,用父类声明对象，用子类实例化对象，是自动转换的</p><pre class=" language-java"><code class="language-java">Animal cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的Animal是cat的父类类型，但是使用Cat子类来实例化</span></code></pre><p><strong>多态的向下转型</strong></p><p>使用父类创建子类的对象，向下转型必须进行强转，而不是像向上转型一样 可以直接转换 </p><pre class=" language-java"><code class="language-java">cat cat <span class="token operator">=</span> （Cat）<span class="token keyword">new</span> <span class="token class-name">Animal</span>（）<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//强制类型转换，先创建Aninmal类之后，再强制转换成Cat类型</span></code></pre><p><strong>—使用多态调用属性时，对象的类型，对象的类型是哪个，就调用哪个类里面的属性</strong> </p><p><strong>—使用多态调用方法时，假如子类的方法覆盖了父类的方法，调用的都是子类的方法，假如是类特有的方法，必须是相对应的类才能调用</strong> </p><h3 id="6-2instanceof关键字"><a href="#6-2instanceof关键字" class="headerlink" title="6.2instanceof关键字"></a>6.2<code>instanceof</code>关键字</h3><p>用法：<code>A instanceof B</code></p><p>用于判断前面的对象（A）是否是后面对象（B）的<strong>类</strong>或者其<strong>子类</strong>，<strong>实现类的对象的实例</strong>，返回一个Boolean类型</p><p>使用关键字时，<code>instanceof</code>操作符的左右必须有继承或者实现的关系</p><h2 id="七、Oject类"><a href="#七、Oject类" class="headerlink" title="七、Oject类"></a>七、<code>Oject</code>类</h2><p>Object是所有类的父类（超类）</p><p>Object中常用的四个方法：</p><p><code>getClass()</code>：返回对象执行时的Class实例 </p><p><code>toString()</code>：没有重写前，就是返回<code>getClass().getname()</code>，内容是与<code>getClass()</code>一 样的，以后使用的时候会重写该方法用于以字符串的方式输出对象 </p><p><code>hashCode()</code>：用来比较两个对象内同是否相等 </p><p><code>equals()</code>：用来比较两个对象是否相等，一般和<code>hashCode()</code>一起使用</p><h3 id="7-1-toString-方法"><a href="#7-1-toString-方法" class="headerlink" title="7.1 toString()方法"></a>7.1 <code>toString()</code>方法</h3><p><code>toString()</code>方法将对象转为字符串的形式，因为在直接输出对象的引用名时，是默认条用对象的<code>toString()</code>方法</p><p>大部分时候，我们在控制台输出一个对象的时候，是想看到对象的属性而不是它指向的 内存地址，比如我们想了解一个人person，我是想了解这个人的姓名，性别，身高体 重之类的属性，并不是想知道他住在哪里，这个时候，我们就可以重写<code>toString()</code>方 法，来实现这个需求</p><p><code>toString()</code>方法格式是固定的，该方法重写设计依据： </p><ol><li>输出对象时，想到看哪些属性，就可以将属性拼接在return后面 </li><li>保证拼接后，结果为String字符串类型 </li><li>拼接后的格式自定义</li></ol><p>重写<code>toString()</code>方法</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token string">"name:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">",id:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h3 id="7-2-hashCode-方法"><a href="#7-2-hashCode-方法" class="headerlink" title="7.2 hashCode()方法"></a>7.2 <code>hashCode()</code>方法</h3><p><code>hashCode()</code>方法主要用来获取对象的<code>hashCode</code>值</p><p><code>hashcode</code>就是通过hash函数得来的，hash函数是一种算法，<code>hashCode</code>值主要是系统 查询内存中对象对应的地址时，提高查询效率的(可以通俗的理解为通过该值快速查找 到对应的内存区域)；</p><p><code>hashCode()</code>方法返回值是一个<code>int</code>类型</p><p><strong>注：</strong>在没有重写<code>hashCode()</code>方法的时候，使用<code>toString()</code>输出的对象会先自动调用该 方法获取到<code>hashCode</code>值，然后再调用<code>Object</code>类中的<code>toString()</code>方法</p><p><code>hashCode()</code>方法重写的设计依据: </p><ol><li>尽量使用到对象的属性 </li><li>保证终返回值为<code>int</code></li><li><code>return</code>后面的公式自定义</li></ol><h3 id="7-3-equals-方法"><a href="#7-3-equals-方法" class="headerlink" title="7.3 equals()方法"></a>7.3 equals()方法</h3><p><code>equals()</code>方法用来判断两个对象是否相等</p><p><strong><code>equals()</code>方法在没有重写前，就是使用的 == 来判断，判断对象的地址值是否相等</strong> </p><p><strong>为什么重写equals():</strong>一般情况下，比较两个对象是否是一个对象时，大部分真实 情况是会判断对象的属性是否都是一样的，假如属性都相同会认为两个对象重复；比如 我们判断两个人是否是同一个人时，会比较人的名字，身份证属性是否一致，是一致的 话认为是同一个人，所以重写该方法情况会比较多</p><p><strong>重写该方法意义：</strong>改变父类比较对象的规则（将==判断规则替换为自定义规则） </p><p>重写<code>equals()</code>方法方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果需要比较的对象为空，肯定不是同一个 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果传进来的对象和本对象内存地址一致，那么肯定是同一个对象 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//一般需要修改的地方在下方，而上方是固定格式</span>    <span class="token comment" spellcheck="true">//如果传进来的类是该类的派生类 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//先强制转换为该类 </span>        Person person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//比较两个类的属性值是否一致，进行字符串的比较 </span>        <span class="token comment" spellcheck="true">//这里的equals是String类中的equals方法，不是Object类中的equals方法 </span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">equale</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> b1<span class="token operator">&amp;&amp;</span>b2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//其他情况，都认为不是同一个对象 </span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>注意：</strong></p><ul><li><code>hashCode</code>和<code>equals</code>：一般两个方法重写的话都会一起重写 </li><li>如果两个对象相同，那么他们的<code>hashCode</code>一定要相同，</li><li>但是<code>hashCode</code>相同不一定是同一个对象，还要取决于<code>equals()</code>方法判断</li></ul><h2 id="八、封装"><a href="#八、封装" class="headerlink" title="八、封装"></a>八、封装</h2><p><strong>封装的思想</strong>：：将类中需要隐藏的属性和方法私有化，只有本类中直接访问，在其 他类中需要访问的话，就需要本类提供的特有的方法（<code>get/set</code>）来进行操作</p><p><strong>为什么要进行封装：</strong> </p><ol><li>提高代码的安全性 </li><li>提高代码的复用性 </li><li>“高内聚”：封装细节，便于修改内部代码，而不影响外部使用，提高可维护性 </li><li>“低耦合”：简化外部调用，便于调用者使用，便于扩展和写作</li></ol><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**      * get（用getXxx命名）     */</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> id<span class="token punctuation">;</span>      <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**      * set（用setXxx命名）     */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h2 id="九、参数传递"><a href="#九、参数传递" class="headerlink" title="九、参数传递"></a>九、参数传递</h2><p>java中，只有<strong>值传递</strong></p><p>对于<strong>基本数据类型和String类型</strong>来说，传递的值是<strong>具体的值</strong> </p><p><strong>对于引用数据</strong>来说，传递的值是对象的<strong>地址值</strong>，地址值是不会<br>变化的，但是地址中存储的数据是会变化的</p><h2 id="十、抽象类和接口"><a href="#十、抽象类和接口" class="headerlink" title="十、抽象类和接口"></a>十、抽象类和接口</h2><h3 id="10-1-抽象类"><a href="#10-1-抽象类" class="headerlink" title="10.1 抽象类"></a>10.1 抽象类</h3><p>抽象关键字abstract，在定义类时加该就关键字，代表该类是抽象类；</p><p>用该关键字也可以修饰方法，代表该类是抽象方法，是一种抽象的行为；可以通俗的理 解为只知道要做一件事情，但是不知道怎么做 </p><p><strong>注意：</strong></p><ol><li><strong>抽象方法没有方法体(没有大括号{})</strong>     </li><li><strong>不能使用抽象类直接创建对象（抽象类不能被实例化），必须通过子类来创建 对象</strong>     </li><li><strong>抽象类中既有可以抽象方法，也可以有非抽象方法</strong>     </li><li><strong>子类继承抽象类，必须实现抽象类中所有的抽象方法</strong></li></ol><p>建议：如果有哪些行为（方法）是必须让子类做的话，可以把这些行为（方法）定义为 抽象的方法</p><p><em>抽象类有构造方法，接口没有构造方法</em></p><h3 id="10-2-接口"><a href="#10-2-接口" class="headerlink" title="10.2 接口"></a>10.2 接口</h3><p>关键字：interface，使用该关键字代替class关键字，代表该文件是接口文件</p><p><strong>注意：</strong></p><ol><li><strong>接口中所有的方法默认都是<code>public abstract</code>修饰的，也就是抽象方法</strong>     </li><li><strong>接口中不能有实现的方法（具体的带方法体的方法，抽象类中是可以有的）</strong>     </li><li><strong>其他实现接口的关键字<code>implement</code></strong>     </li><li><strong>实现接口必须实现接口中所有的抽象方法（即里面所有的方法）</strong>     </li><li><strong>接口不能直接创建对象（不能被实例化），必须通过实现类创建</strong>     </li><li><strong>一个类可以实现多个接口，用逗号隔开（类继承只能继承一个父类，单继承， 多实现）</strong>     </li><li><strong>接口不能实现接口</strong>     </li><li><strong>接口可以继承接口，并且可以继承多个接口，中间用逗号隔开</strong>     </li><li><strong>接口中的属性默认都是<code>public static final</code>修饰的，都是常量</strong></li></ol><p><em>接口中没有构造方法，抽象类中是有构造方法的</em></p><h2 id="十一、内部类"><a href="#十一、内部类" class="headerlink" title="十一、内部类"></a>十一、内部类</h2><p>在类体里面定义的类,有四种 </p><p><strong>1.成员内部类</strong>：在类的成员变量位置上定义一个类，相当于类的成员属性 </p><p><strong>2.局部内部类：</strong>在类的局部（方法或者代码块内）位置定义一个类 </p><p><strong>3.匿名内部类：</strong>在类中定义一个没有名称，只有类体的类（常用） </p><p><strong>4.静态内部类</strong>：静态的成员内部类，在类中定义一个前面加static关键字类，像当与类的静态资源（静态属性或者方法）</p><h3 id="11-1-成员内部类"><a href="#11-1-成员内部类" class="headerlink" title="11.1 成员内部类"></a>11.1 成员内部类</h3><p>成员内部类中既可以访问外部类中的静态属性，也可以直接访问外部类中的非静 态属性和方法 </p><p>类方法中想要调用成员内部类中的属性，要先创建对象，通过对象调用属性，不管是里面的方法调用外面的属性还是外面的方法调用里面的属性都需要使用对象访问</p><p>成员内部类访问外部类的属性：外部类名.this.外部类属性，使用到了内部类后，不建议内部类和外部类的属性名重复 </p><h3 id="11-2-局部内部类"><a href="#11-2-局部内部类" class="headerlink" title="11.2 局部内部类"></a>11.2 局部内部类</h3><p>在类的局部（方法或者代码块）定义的一个类 局部内部类可以访问外部类中的静态属性和方法，也可以访问外部类中的非静态属性和 方法</p><h3 id="11-3、匿名内部类（重点）"><a href="#11-3、匿名内部类（重点）" class="headerlink" title="11.3、匿名内部类（重点）"></a>11.3、匿名内部类（重点）</h3><p>只有类体没有类名的内部类 </p><p>什么时候使用匿名内部类：当我们使用抽象类或者接口时，如果不想定义子类或者实现 类时可以使用匿名内部类创建抽象类或者接口的对象 </p><ul><li>抽象类中使用匿名内部类：</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建抽象类 </span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//动物名字 </span>    String name<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//动物吃东西方法。抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//正常创建抽象类对象</span>         Animal an <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          an<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用匿名内部类 </span>         Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//添加实现方法 </span>              <span class="token annotation punctuation">@Override</span>               pubic <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//创建的类可以直接使用animal中的属性和方法 </span>          animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>接口中使用匿名内部类 </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义车的接口 </span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//两个抽象方法</span>    <span class="token keyword">public</span> sbstract <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用匿名内部类</span>        Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//重写两个方法</span>            <span class="token annotation punctuation">@Override</span>              pubic <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"车跑了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>              pubic <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"车停了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="11-4-静态内部类"><a href="#11-4-静态内部类" class="headerlink" title="11.4 静态内部类"></a>11.4 静态内部类</h3><p>静态的成员内部类，在类中定义一个前面加static关键字类，相当于类 的静态资源（静态属性或者方法） </p><p>成员内部类加上static关键字就是静态内部类</p><h2 id="软帝学院传送门"><a href="#软帝学院传送门" class="headerlink" title="软帝学院传送门"></a>软帝学院传送门</h2><blockquote><h3 id="Mediocre-or-Extraordinary"><a href="#Mediocre-or-Extraordinary" class="headerlink" title="Mediocre or Extraordinary"></a><strong><a href="http://rd.ke.qq.com" target="_blank" rel="noopener">Mediocre or Extraordinary</a></strong></h3></blockquote>]]></content>
      
      
      <categories>
          
          <category> 阶段小结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java错题集</title>
      <link href="/2019/12/13/java-cuo-ti-ji/"/>
      <url>/2019/12/13/java-cuo-ti-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="java语法"><a href="#java语法" class="headerlink" title="java语法"></a>java语法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  x <span class="token operator">=</span> x<span class="token operator">++</span> <span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>程序会输出（D）。  A<span class="token number">.11</span> B<span class="token number">.10</span> C<span class="token number">.21</span> D<span class="token number">.20</span></code></pre><p>++x：先自加，然后加入式子进行运算</p><p>x++：先加入式子运算，然后再自加</p><p>在式子 x = x++ +10 中x++先把值加入到运算中，然后自增，可是自增的时候没有赋值，所以被舍弃掉</p><hr><pre><code>(多选题)下列关于成员变量默认值的描述中，正确的是（ABD ）。  A.byte类型的数据默认值是0 B.int类型的数据默认值是0 C.long类型的数据默认值是0 D.float类型的数据默认值是0.0f</code></pre><p><img src="https://article-1300910484.cos.ap-shanghai.myqcloud.com/java%E9%94%99%E9%A2%98%E9%9B%86/1.png" alt=""></p><hr><pre><code>(多选题)下列关于JDK的说法正确的是（AC ）  A.开发一个Java程序，需要完整的JDK B.运行一个Java程序，需要完整的JDK C.运行一个Java程序，只需要JDK中的JRE D.以上说法都不对</code></pre><p>使用Java之前  ： 安装JDK </p><p>JDK  : Java运行的环境  JVM（Java虚拟机） + JRE Java所依赖的类库<br>Java跨平台 </p><p>运行Java程序  .java<br>使用javac命令将Java文件编程成.class的字节码文件<br>再使用 java 命令 运行.class字节码文件 （JVM运行）</p><p><strong>那么为什么要将java文件编程成.clsaa的字节码文件呢？</strong></p><p>因为   程序 =  数据结构+算法，程序是程序员能看懂的代码，而计算机看不懂，计算机要将程序转换成程序能看懂的字节码件；</p><hr><pre><code>(多选题)下列对Java变量的使用说法正确的是（ CD）  A.声明变量可以指定数据类型，也可以不指定 B.变量名采用任意命名的方式，尽量做到见名知意 C.局部变量声明后，要为其赋一个确定的初值后再使用 D.变量是指在内存中开辟的存储空间中存放的运算过程中需要用到的数据。</code></pre><p><strong>变量的命名规则（法律：必须遵守的）</strong></p><p>   只能以字母下划线或者$开始，不能包含特殊字符，不能使用Java关键字；</p><p><strong>变量的命名规范 （道德：约束）</strong></p><p>  变量名要见名知意<br>  驼峰命名法： 首字母小写，多个单词组成，从第二个单词首字母大写；<br>比如：开始游戏的变量  startGame</p><hr><pre><code>(多选题)变量定义如下：   int i = 128;下列赋值语句正确的是：（ACD）。 A.int j = i; B.short s = i; C.short s = 128; D.long l = i;</code></pre><p><strong>自动类型转换和强制类型转换</strong><br><em>自动类型转换 ：</em><br>    将像范围的数据转换成大范围的数据 ，会发生自动类型转换（隐式类型转换）<br>    比如 ： byte -&gt; int<br><em>强制类型转换：</em></p><p>​    将大范围的数据转换成小范围的数据，需要强制类型转换（显示类型转换）   </p><p>​    比如： int -&gt; byte</p><hr><pre><code>(多选题)如下变量的定义，double d = 1.5;int x=1,y=2,z=3;则正确的switch语句是（ AC） A.switch((int)d){ case 1:System.out.println(x);break; case 2:System.out.println(y);break; } B.switch(d){ case 1.5:System.out.println(x);break; case 2.0:System.out.println(y);break; }</code></pre><p><strong>switch括号中的值，可以是什么类型的？</strong><br>jdk1.7以前 ： <code>byte,short,char,int</code>  ，枚举<br>jdk1.7以后 ：除了上面的几种类型，还可以放<code>String</code></p><p><strong>switch 的运行机制：</strong><br>会根据括号中的值，去匹配<code>case</code>中的值，一旦匹配到了值，就会从当前的<code>case</code>语句开始一直往下执行<br>直到遇到<code>break</code>或者<code>switch</code>语句为止；</p><hr><h2 id="OOP面向对象"><a href="#OOP面向对象" class="headerlink" title="OOP面向对象"></a>OOP面向对象</h2><p><img src="https://article-1300910484.cos.ap-shanghai.myqcloud.com/java%E9%94%99%E9%A2%98%E9%9B%86/2.png" alt=""></p><p>答案：D</p><p>解析：<code>A instanceof B</code> 是用来判断 A 类是否是 B 类的子类，实现类的实例，是则返回<code>true</code>   不是有则返回<code>false</code>;    在第07行中，<code>animal</code>是<code>Dog</code>类的引用，与08行中的<code>Cat</code>类并不存在继承关系，所以返回<code>false</code>，执行<code>else</code>中的语句；</p><hr><p><img src="https://article-1300910484.cos.ap-shanghai.myqcloud.com/java%E9%94%99%E9%A2%98%E9%9B%86/3.png" alt=""></p><p>答案：D</p><p>解析：在第4行中，用<code>Teacher</code>类型定义了一个<code>teachers</code>数组，但是在数组<code>teachers</code>中，没有存入任何的元素，所以在<code>teachers</code>中，<code>teachers[0]=null,teachers[1]=null</code>；既然元素为空，那么在第5行中，就不能 . 出<code>name</code>，所以会在运行时抛出异常；</p><hr><p><img src="https://article-1300910484.cos.ap-shanghai.myqcloud.com/java%E9%94%99%E9%A2%98%E9%9B%86/4.png" alt=""></p><p>答案：C</p><p>解析：第19行实例化<code>Employee</code>的时候，调用了<code>Employee</code>的有参构造器；在java中，子类的有参构造器会默认在第一行有<code>super()</code>，即调用父类的无参构造器；而在父类中，<code>Person</code>是没有无参构造器的，因为<code>Person</code>有一个有参构造器。在有有参构造器的情况下，如果不写无参构造器，那么就不会有一个默认的无参构造器。所以<code>Person</code>没有无参的构造器，子类有参构造器调用父类无参构造器失败，就会在第12行报错；</p><p><img src="https://article-1300910484.cos.ap-shanghai.myqcloud.com/java%E9%94%99%E9%A2%98%E9%9B%86/5.png" alt=""></p><p>答案：B</p><p>解析：难点在11行，<code>(A)new B().start</code>的意思是新建一个B的实例，再将这个实例给向上转换成A类，然后调用里面的<code>start()</code>方法。在类的多态中：</p><table><thead><tr><th align="center">使用多态调用属性</th><th align="center">使用多态调用方法</th></tr></thead><tbody><tr><td align="center">看对象的类型是，声明时的类型是什么，调用的属性就是哪个类里面的</td><td align="center">如果子类覆盖了父类的方法，调用的就是子类的方法。</td></tr></tbody></table><p>所以调用的B类中的<code>start()</code>方法；</p><hr><p><img src="https://article-1300910484.cos.ap-shanghai.myqcloud.com/java%E9%94%99%E9%A2%98%E9%9B%86/6.png" alt=""></p><p>答案：AC</p><p>解析：A：move方法中的返回值类型与参数相同，所以是重写；子类中，如果要重写父类的方法，那么前面的修饰符不可以比父类的方法更加严格，所以A是对的；<code>public(公有的)</code>&gt;<code>protected(受保护的)</code>&gt;<code>default(缺省)</code>&gt;<code>private(私有的)</code></p><p>​            B：move是父类的重写，可是修饰符比父类更加严格，所以是错的；</p><p>​            C：move方法中的返回值类型相同，但是参数不同，所以是重载；C是对的；</p><p>​            D：move方法中类型不同，参数相同，所以既不是重写也不是重载；那么子类与父类的方法重名了，所以D错误；</p><hr><p><img src="https://article-1300910484.cos.ap-shanghai.myqcloud.com/java%E9%94%99%E9%A2%98%E9%9B%86/7.png" alt=""></p><p>答案：BC</p><p>解析：类新建的对象都是存储在 堆 中的，类的引用是存放在 栈 中的，栈存放类的对象的地址跟常量值；</p>]]></content>
      
      
      <categories>
          
          <category> 错题集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 未完 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础语法整理</title>
      <link href="/2019/12/13/java-yu-fa-ji-chu/"/>
      <url>/2019/12/13/java-yu-fa-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="一：java语言基础"><a href="#一：java语言基础" class="headerlink" title="一：java语言基础"></a>一：java语言基础</h2><h3 id="1-1java的入口与注释"><a href="#1-1java的入口与注释" class="headerlink" title="1.1java的入口与注释"></a>1.1java的入口与注释</h3><h4 id="1-1-1java的入口"><a href="#1-1-1java的入口" class="headerlink" title="1.1.1java的入口"></a>1.1.1java的入口</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><p>java程序的主函数，帮助我们运行写java代码，能够看到程序运行的效果 没有main方法，程序无法运行，main方法不能乱写，固定格式;</p><h4 id="1-1-2打印输出语句"><a href="#1-1-2打印输出语句" class="headerlink" title="1.1.2打印输出语句"></a>1.1.2打印输出语句</h4><p> System.out.println()；</p><ul><li>println() 是一个方法。</li><li>System 是系统类。 </li><li>out 是标准输出对象</li></ul><p>这句话的用法是调用系统类 System 中的标准输出对象 out 中的方法 println()。</p><p>转义字符：</p><table><thead><tr><th>转义字符</th><th>含义</th></tr></thead><tbody><tr><td>‘’</td><td>单引号字符</td></tr><tr><td>“\“</td><td>双引号字符</td></tr><tr><td>\\</td><td>反斜杠字符</td></tr><tr><td>\t</td><td>垂直制表符，将光标移到下一个制表符的位置</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\b</td><td>退格</td></tr><tr><td>\f</td><td>换页</td></tr></tbody></table><h4 id="1-1-3注释"><a href="#1-1-3注释" class="headerlink" title="1.1.3注释"></a>1.1.3注释</h4><p>//单行注释：常用来写代码行的注释</p><p>/**/多行注释</p><p>/** 开始，以 */结束。第三种被称作说明注释。说明注释允许你在程序中嵌入关于程序的信息。 经常用于对类与方法的功能进行解释。</p><h3 id="1-2数据类型"><a href="#1-2数据类型" class="headerlink" title="1.2数据类型"></a>1.2数据类型</h3><p>java中的数据类型：基本数据类型和引用数据类型</p><h4 id="1-2-1基本数据类型"><a href="#1-2-1基本数据类型" class="headerlink" title="1.2.1基本数据类型"></a>1.2.1基本数据类型</h4><p><strong>整形：整数的数据类型</strong></p><table><thead><tr><th>整形</th><th>字节（所占内存空间）</th><th>位数（长度）</th><th>最大值</th><th>最小值</th></tr></thead><tbody><tr><td>byte</td><td>1字节</td><td>8</td><td>127(2^7-1)</td><td>-128(-2^7)</td></tr><tr><td>short</td><td>2字节</td><td>16</td><td>32767(2^15-1)</td><td>-32768(-2^15-1)</td></tr><tr><td>int（整形默认类型）</td><td>4字节</td><td>32</td><td>2^31-1</td><td>-2^31</td></tr><tr><td>long</td><td>8字节</td><td>64</td><td>2^63-1</td><td>-2^63</td></tr></tbody></table><p>总结下规律:从7开始，依次乘2+1</p><p><strong>浮点型：小数的数据类型</strong></p><table><thead><tr><th>数据类型</th><th>字节</th><th>说明</th></tr></thead><tbody><tr><td>ﬂoat</td><td>4字节</td><td>单精度小数（不常用）</td></tr><tr><td>double（浮点数默认类型）</td><td>8字节</td><td>双精度小数（常用）</td></tr></tbody></table><p><strong>字符型：文字或者符号的数据类型</strong></p><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>char</td><td>字符、文字等</td></tr></tbody></table><p><strong>布尔类型：真或假类型</strong></p><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>boolean</td><td>只有两个值   true/false</td></tr></tbody></table><h4 id="1-2-2引用数据类型"><a href="#1-2-2引用数据类型" class="headerlink" title="1.2.2引用数据类型"></a>1.2.2引用数据类型</h4><p>Java中jdk封装的类，以及自定义的Java类，都属于引用数据类型<br>每一种基本数据类型，都对应有引用数据类型（称之为基本数据类型的包装类）<br>这些引用数据类型封装了对基本数据类型进行操作的方法以及数据，比如求基本数据类型的最大值，最 小值以及位数，都可以使用对应的引用数据类型来进行获取。</p><table><thead><tr><th>基本数据类型</th><th>引用数据类型</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>flat</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><h4 id="1-3-1什么是变量"><a href="#1-3-1什么是变量" class="headerlink" title="1.3.1什么是变量"></a>1.3.1什么是变量</h4><p>计算机用来存储变量可变数据的内存空间</p><p>java中的变量，它是一个内存空间，要占用一定的内存大小</p><h4 id="1-3-2创建变量"><a href="#1-3-2创建变量" class="headerlink" title="1.3.2创建变量"></a>1.3.2创建变量</h4><ul><li>确定变量的类型跟名称</li><li>给变量赋值（初始化）</li></ul><h4 id="1-3-3变量命名的规则和规范"><a href="#1-3-3变量命名的规则和规范" class="headerlink" title="1.3.3变量命名的规则和规范"></a>1.3.3变量命名的规则和规范</h4><p><strong>1.变量的命名规则（必须遵守，法律）：</strong><br>        只能以“字母”，<code>“_”</code>，<code>“$”</code>开始，不能以数字开始，不能包含特殊字符<code>（+、-、*、/）</code>，以及Java    关键字<br><strong>2.变量的命名规范（不必须，道德）：</strong><br>        变量命名尽量见名知意，采用驼峰命名法。</p><p>​        驼峰命名法：变量首字母小写，如果多个单词，从第二个单词开始，首字母大写。举例：         startGame</p><p><strong>定义变量需要注意的问题：</strong>               </p><ol><li>编译器默认的整数类型为<code>int</code>类型（整数超过int范围就会报错，如果定义long类型超过int范围 需要在数据后面加 L 或 l ）。            </li><li>默认的小数类型是<code>double</code>类型（如果需要定义ﬂoat时需要在数据后面加 F 或 f ）。</li><li><code>char</code>类型的数据，如果要定义字符，需要用单引号包裹，并且单引号中只能是一个字符内容（不能用双引号）。</li></ol><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ol><li>变量使用之前，必须经过声明并且初始化</li><li>变量不能重复定义 3.变量名只能以字母，下划线，$开始，可以包含数字，不能包含特殊字符（+、-、*、/）等，不能使用 Java关键字</li><li>变量命名最好见名知意，并且采用驼峰命名法 </li><li>如果定义<code>long</code>类型的数据，最好值后面加l或者L，如果定义ﬂoat类型的数据，最好值后面加f或者F </li></ol><h3 id="1-4-java中的数据类型转换"><a href="#1-4-java中的数据类型转换" class="headerlink" title="1.4 java中的数据类型转换"></a>1.4 java中的数据类型转换</h3><ol><li>自动类型转换（隐示类型转换）<br>   当<code>小</code>范围的数据向<code>大</code>范围的数据类型时，会发生自动类型转换   <code>byte  -&gt; int  (会自动转)</code></li><li>强制类型转换（显示类型转换）：慎用  当<code>大</code>范围的数据类型向<code>小</code>范围数据类型时，需要强制类型转换<code>int  -&gt; byte  (强制性)</code></li></ol><h3 id="1-5键盘扫描器：Scanner"><a href="#1-5键盘扫描器：Scanner" class="headerlink" title="1.5键盘扫描器：Scanner"></a>1.5键盘扫描器：Scanner</h3><p> Scanner key=new Scanner(System.in); </p><ul><li>接收int类型的内容：key.nextInt();</li><li>接收double类型的内容：key.nextDouble(); </li><li>接收String类型的内容：key.next();或者key.nextLine(); </li></ul><p>关闭扫描器</p><p>key.close();</p><h3 id="1-6java中的运算符"><a href="#1-6java中的运算符" class="headerlink" title="1.6java中的运算符"></a>1.6java中的运算符</h3><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>赋值运算符</td><td>=</td></tr><tr><td>算数运算符</td><td>+(加)、-(减)、*(乘)、/(除)、%(取余)</td></tr><tr><td>条件运算符</td><td>&lt;(小于)、&gt;(大于)、==(等于)、！=(不等于)、&lt;=(小于等于)、&gt;=(大于等于)</td></tr><tr><td>位运算符</td><td>&amp;(与)、|(或)、^（异或）、~（非）</td></tr><tr><td>逻辑运算符</td><td>&amp;&amp;(双与)、||(双或)</td></tr><tr><td>自增，自减</td><td>++、–</td></tr><tr><td></td><td>条件表达式  ？ 值1  :  值2</td></tr></tbody></table><p>位运算符的特别说明:</p><p>&amp;（与）：只有当同时为<code>true</code>的时候结果才为<code>true</code>否则是<code>false</code>；<strong>当两边是数字时，按位与(先将整数转换成2进制，然后在将两个二进制数按位或，有一 个为1，结果就为1，将后的结果再转换成10进制)</strong></p><p>|（或）：左右两边有一边为<code>true</code>整个结果就为<code>true</code>；<strong>左右两边都是整数时，做按位或（先将整数转换成2进制，然后在将两个二进制数按位或，有一 个为1，结果就为1，将后的结果再转换成10进制)</strong></p><p>^（异或）：按位或，只有当同时为0的时候结果才为0，否则为1. </p><p>~（非）：0变1，1变0</p><h2 id="二：流程控制"><a href="#二：流程控制" class="headerlink" title="二：流程控制"></a>二：流程控制</h2><h3 id="2-1-条件语句"><a href="#2-1-条件语句" class="headerlink" title="2.1 条件语句"></a>2.1 条件语句</h3><h4 id="2-1-1-if条件语句"><a href="#2-1-1-if条件语句" class="headerlink" title="2.1.1 if条件语句"></a>2.1.1 if条件语句</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件语句<span class="token punctuation">)</span><span class="token punctuation">{</span>    代码块<span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件语句<span class="token punctuation">)</span><span class="token punctuation">{</span>    代码块<span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    代码块<span class="token number">3</span><span class="token punctuation">}</span></code></pre><ul><li>从上到下依次判断条件是否成立，如果成绩就执行对应代码块内容，如果条件表达式都不 成立就执行else中的代码；</li><li>当一旦有条件表达式成立并执行代码后，整个if语句就会结束，无论后面条件表达式是否成立都 不会再执行</li></ul><h4 id="2-1-2-switch多分支语句"><a href="#2-1-2-switch多分支语句" class="headerlink" title="2.1.2 switch多分支语句"></a>2.1.2 switch多分支语句</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span>（值）<span class="token punctuation">{</span>    <span class="token keyword">case</span> 值<span class="token number">1</span>：代码块<span class="token number">1</span>     <span class="token keyword">case</span> 值<span class="token number">2</span>：代码块<span class="token number">2</span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">case</span> 值n：代码块n     <span class="token keyword">default</span>：默认代码块<span class="token punctuation">}</span> </code></pre><p>jdk1.8 只能放  <code>byte，short，char ,int,String,枚举</code>       </p><p>注意：在jdk1.7以前，<code>String</code>是不能放的 </p><h3 id="2-2-循环语句"><a href="#2-2-循环语句" class="headerlink" title="2.2 循环语句"></a>2.2 循环语句</h3><h4 id="2-2-1-while循环"><a href="#2-2-1-while循环" class="headerlink" title="2.2.1 while循环"></a>2.2.1 while循环</h4><pre class=" language-java"><code class="language-java"> <span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>          代码块 <span class="token punctuation">}</span><span class="token keyword">do</span><span class="token punctuation">{</span>    代码块<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span></code></pre><p>只要条件表达式成立（true），就会一直重复执行代码块，直到条件表达式不能成立为false。</p><p>注意：条件表达式在编译期，如果条件表达式很明显能判断为true时（如  <code>true</code>,<code>5&gt;4</code>），编译器会识别到是死循环，然后报错；</p><p>但如果</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>编译器并不会在编译期报错，因为编译器判断时无法获得n的值，所以无法做出判断，是否是死循环；</p><h4 id="2-2-2-for循环语句"><a href="#2-2-2-for循环语句" class="headerlink" title="2.2.2 for循环语句"></a>2.2.2 for循环语句</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span>（表达式<span class="token number">1</span><span class="token punctuation">;</span>条件表达式<span class="token punctuation">;</span>表达式<span class="token number">2</span>）<span class="token punctuation">{</span>    代码块<span class="token punctuation">}</span></code></pre><p> for循环每次循环之前，需要判断一下条件表达式是否成立，如果成立才执行代码块，否则就不执行</p><ul><li>如果不知道循环次数，建议使用while循环 </li><li>如果知道具体循环多少次，建议用for循环 </li></ul><h4 id="2-2-3-foreach语句"><a href="#2-2-3-foreach语句" class="headerlink" title="2.2.3 foreach语句"></a>2.2.3 foreach语句</h4><p>一般用来遍历数组或者集合</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span>（数据类型 变量名：数组名）<span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>说明：<br>    1.数据类型为数组中元素的数据类型<br>    2.变量代表着遍历数组时的每一个元素</p><h3 id="2-3-跳转语句"><a href="#2-3-跳转语句" class="headerlink" title="2.3 跳转语句"></a>2.3 跳转语句</h3><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><p>跳出循环:在指定位置跳出循环 </p><p>break 在需要跳出循环的位置加break </p><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><p>结束当前循环，开始下一个循环           </p><p>continue: 当此次循环不需要往下执行的时候，但其他循环人就需要执行，可以用continue</p><h2 id="三：数组"><a href="#三：数组" class="headerlink" title="三：数组"></a>三：数组</h2><h3 id="3-1-一维数组"><a href="#3-1-一维数组" class="headerlink" title="3.1 一维数组"></a>3.1 一维数组</h3><p>数组的作用：用来存放多个数据类型相同的数据。 </p><p>注意：数组也是一种引用数据类型。 定义数组变量的格式：</p><ul><li><p>格式1：数据类型[] 数组名 = new 数据类型[<code>数组长度</code>];</p></li><li><p>格式2：数据类型[] 数组名 = {<code>值1，值2...值n</code>};</p></li><li><p>格式3：数据类型[] 数组名 = new 数据类型[]{<code>值1，值2...值n</code>}; </p><p><code>int [] a = new int [];//错误，未指定长度</code></p></li></ul><h3 id="3-2-二维数组"><a href="#3-2-二维数组" class="headerlink" title="3.2 二维数组"></a>3.2 二维数组</h3><ul><li>格式1：数据类型[][]  数组名 = new 数据类型[<code>二维数组中有多少个数组</code>][<code>每个数组中有多少个元素</code>] </li><li>格式2：数据类型[][]  数组名 = {<code>{33,25,67}</code>,<code>{28,76,9}</code>,<code>{1,2,3}</code>}; </li><li>格式3： 数据类型[][]  数组名 = new int[][]{<code>{33,25,67}</code>,<code>{28,76,9}</code>,<code>{1,2,3}</code>}; </li></ul><p><strong>Java中没有严格意义上的二维数组：所谓的二维数组就是数组的数组</strong></p><h3 id="3-3-数组的基本操作"><a href="#3-3-数组的基本操作" class="headerlink" title="3.3 数组的基本操作"></a>3.3 数组的基本操作</h3><p>Arrays：数组的工具类，里面封装了对数组的操作的方法</p><h4 id="批量替换"><a href="#批量替换" class="headerlink" title="批量替换"></a>批量替换</h4><ul><li>Arrays.fill(数组名，值); </li><li>Arrays.fill(数组名，开始的下标包含，结束的下标不包含，值); </li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//批量替换：Arrays.fill(数组名，值);</span>Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//批量替换，把arr中的元素全部替换成 7</span></code></pre><pre><code>int[] arr = new int[] {1,2,3,4,5,6,7,8,9}; //批量替换：Arrays.fill(数组名，开始的下标包含，结束的下标不包含，值); Arrays.fill(arr,1,5,0);//批量替换，把arr数组从arr[1]到arr[4]的值替换成 0;</code></pre><h4 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h4><ul><li>Arrays.copyOf(要复制的数组,  新数组的长度); </li><li>Arrays.copyOfRange(要复制的数组, 要开始读的数组下标, 读取到的数组下标（不包含）);</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Arrays.copyOf(要复制的数组,  新数组的长度); </span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArr2 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将arr复制给newArr2，但只能复制前3位，同时newArr2的长度为3</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Arrays.copyOfRange(要复制的数组, 要开始读的数组下标, 读取到的数组下标（不包 含）);</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArr3 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将arr2从arr2[2]到arr2[6]复制给素组newArr3</span></code></pre><p>使用Arrays.copyOf给数组扩容，缩容</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Arrays.copyOf(要复制的数组,  新数组的长度);</span>arr2 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span>arr2<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//arr2复制给自己,但是arr2的长度变为自己原本的长度+1,也就是扩容扩1位;同样，要是缩容就用减法</span></code></pre><h3 id="3-4-数组的排序"><a href="#3-4-数组的排序" class="headerlink" title="3.4 数组的排序"></a>3.4 数组的排序</h3><h4 id="3-4-1-排序方法"><a href="#3-4-1-排序方法" class="headerlink" title="3.4.1 排序方法"></a>3.4.1 排序方法</h4><ul><li>冒泡排序：对比相邻的元素值，如果满足条件就交换元素值，把较小的元素移动到数组的前面，把较大 的元素移动到数组后面（也就是交换两个元素的位置），这样较小的元素就像气泡一样从底部上升到顶部</li><li>选择排序：速度比冒泡排序快些<br>选择排序：将指定排序位置与其他数组元素分别对比，如果满足条件就交换元素值，注意这里区别冒泡 排序，不是交换相邻元素，而是把满足条件的元素与指定的排序位置交换（如从最后一个元素开始排 序），这样排序好的位置逐渐扩大，最后整个数组都成为已排序好的格式</li><li>插入法排序：利用插入法对无序数组排序时，我们其实是将数组R划分成两个子区间R[1．．i-1]（已排好序的有序区）和R[i．．n]（当前未排序的部分，可称无序区）。插入排序的基本操作是将当前无序区的第1个记录R[i]插人到有序区R[1．．i-1]中适当的位置上，使R[1．．i]变为新的有序区。因为这种方法每次使有序区增加1个记录，通常称增量法。</li></ul><h4 id="3-4-2-二分法查找"><a href="#3-4-2-二分法查找" class="headerlink" title="3.4.2 二分法查找"></a>3.4.2 二分法查找</h4><p> <em>二分法：顾名思义就是要将数据每次都分成两份然后再去找到你想要的数据</em></p><p>使用二分法查找的前提是：</p><ul><li>有序的数组，没有重复的数据元素。 </li><li>如果没有排序过的，需先排序。 </li><li>二分法查找时使用场景为：数据量较大时 </li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *二分法查找 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 二分法查找</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 大索引</span>    <span class="token keyword">int</span> maxIndex <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 小索引</span>    <span class="token keyword">int</span> minIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 中间索引</span>    <span class="token keyword">int</span> halfIndex <span class="token operator">=</span> minIndex<span class="token operator">+</span><span class="token punctuation">(</span>maxIndex<span class="token operator">-</span>minIndex<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>minIndex<span class="token operator">&lt;=</span>maxIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 找到时</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>halfIndex<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> halfIndex<span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>halfIndex<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 比a小时</span>            minIndex <span class="token operator">=</span> halfIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 比a大时</span>               maxIndex <span class="token operator">=</span> halfIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        halfIndex <span class="token operator">=</span> minIndex<span class="token operator">+</span><span class="token punctuation">(</span>maxIndex<span class="token operator">-</span>minIndex<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-4-3-Arrays-sort-方法"><a href="#3-4-3-Arrays-sort-方法" class="headerlink" title="3.4.3 Arrays.sort()方法"></a>3.4.3 Arrays.sort()方法</h4><p><strong>只能进行升序排列</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排序后:[1, 3, 4, 15, 24, 63] </span></code></pre><h4 id="3-4-4-递归"><a href="#3-4-4-递归" class="headerlink" title="3.4.4 递归"></a>3.4.4 递归</h4><p>递归：自己调用自己，直到满足一个条件结束自己调用自己的过程 </p><p>递归的思想：</p><p>对于一个复杂的问题，把原问题分解为若干个相对简单类同的子问题，继续下去直到子问题简单到能够直 接求解，也就是说到了递推的出口， 这样原问题就有递推得解。</p><p>关键要抓住的是：</p><ul><li>递归出口 </li><li>递推逐步向出口逼近 </li></ul><hr><h2 id="软帝学院传送门"><a href="#软帝学院传送门" class="headerlink" title="软帝学院传送门"></a>软帝学院传送门</h2><blockquote><h3 id="Mediocre-or-Extraordinary"><a href="#Mediocre-or-Extraordinary" class="headerlink" title="Mediocre or Extraordinary"></a><strong><a href="http://rd.ke.qq.com" target="_blank" rel="noopener">Mediocre or Extraordinary</a></strong></h3></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
            <tag> 阶段小结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合&amp;泛型&amp;比较器</title>
      <link href="/2019/12/13/ji-he-fan-xing-bi-jiao-qi/"/>
      <url>/2019/12/13/ji-he-fan-xing-bi-jiao-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h2><h3 id="为什么要有集合"><a href="#为什么要有集合" class="headerlink" title="为什么要有集合"></a>为什么要有集合</h3><ul><li>数组的长度是不可变的，对数组扩容缩容不方便操作，集合的长度是可边的，自动扩容缩容</li><li>集合的操作比数据更加方便快捷</li></ul><h3 id="集合的分类："><a href="#集合的分类：" class="headerlink" title="集合的分类："></a>集合的分类：</h3><ul><li>线性集合：Collection父接口集合，实现了改接口的都是线性集合<ul><li>list子接口：常用实现类：<ul><li>ArrayList：</li><li>LinkLIst</li></ul></li><li>set子接口：常用实现类HashSet和TreeSet</li></ul></li><li>键值对集合：Map</li></ul><p><strong>List集合：有序的，可以有重复元素</strong></p><p><strong>Set集合：无序的，元素不可重复</strong></p><h2 id="List集合（有序可重复）"><a href="#List集合（有序可重复）" class="headerlink" title="List集合（有序可重复）"></a>List集合（有序可重复）</h2><h3 id="两个常用的实现类内存数据结构对比："><a href="#两个常用的实现类内存数据结构对比：" class="headerlink" title="两个常用的实现类内存数据结构对比："></a><strong>两个常用的实现类内存数据结构对比：</strong></h3><ul><li><p><strong>ArrayList底层数据结构是数组：</strong>具有<code>数组</code>数据结构的List集合，由下表，可以通过下标获取或者删除修改集合中的元素，下标和数组一样从0开始；</p><p>与数组不同的是，ArrayList的长度是可变的，添加元素和删除元素不需要手动扩容缩容；</p></li><li><p><strong>LinkedList底层数据结构是链表：</strong>上香链表结构没有下标，添加数据先断开链表的连接，在双向连接；</p></li></ul><h3 id="两个常用实现类用法对比："><a href="#两个常用实现类用法对比：" class="headerlink" title="两个常用实现类用法对比："></a>两个常用实现类用法对比：</h3><ul><li><p>查询方面：</p><ul><li><p>ArrayList有下标，可以根据下标直接获取元素，效率高</p></li><li><p>LinkedList没有下标，获取元素需要前后遍历，查询效率低</p></li></ul></li><li><p>修改方面：</p><ul><li>ArrayList删除和添加需要移动元素，效率低</li><li>LinkedList删除和添加只需要断开连接然后在断开的地方删除或者添加元素，效率比ArrayList高</li></ul></li></ul><h3 id="ArrayList与LinkedList小结"><a href="#ArrayList与LinkedList小结" class="headerlink" title="ArrayList与LinkedList小结"></a>ArrayList与LinkedList小结</h3><table><thead><tr><th></th><th>数据结构</th><th>查询（对比）</th><th>修改（对比）</th></tr></thead><tbody><tr><td>ArrayList</td><td>数组</td><td>快</td><td>慢</td></tr><tr><td>LinkedList</td><td>链表</td><td>慢</td><td>快</td></tr></tbody></table><h3 id="List常用的方法："><a href="#List常用的方法：" class="headerlink" title="List常用的方法："></a>List常用的方法：</h3><p>定义一个List集合</p><pre class=" language-java"><code class="language-java">List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LinkedList list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><ul><li><p>向集合中添加元素</p><pre class=" language-java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//list集合的有序是指集合的元素是按照存入的顺序排列的</span></code></pre></li><li><p>在指定位置插入元素</p><pre class=" language-java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>元素<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在下标index处插入元素</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>获取集合的长度</p><pre class=" language-java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>获取集合中的元素</p><pre class=" language-java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//index就是下标</span></code></pre></li><li><p>移除集合元素</p><pre class=" language-java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//index就是下标</span></code></pre></li><li><p>更改指定位置的元素</p><pre class=" language-java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>新元素<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在下标index处，将原来的元素改为新元素</span>list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"新字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="LinkedList（前面ArrayList的方法都适用）"><a href="#LinkedList（前面ArrayList的方法都适用）" class="headerlink" title="LinkedList（前面ArrayList的方法都适用）"></a>LinkedList（前面ArrayList的方法都适用）</h4><ul><li><p>获取元素的头节点</p><pre class=" language-java"><code class="language-java">list1<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在源码中，这个方法也是直接调用的getFirst方法</span></code></pre></li><li><p>获取元素的尾节点</p><pre class=" language-java"><code class="language-java">list1<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>删除头节点</p><pre class=" language-java"><code class="language-java">list1<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只能删除头节点，里面不能加参数</span>list1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不加参数默认删除头节点，加上参数，则删除对应下标的元素</span></code></pre></li></ul><h3 id="遍历集合"><a href="#遍历集合" class="headerlink" title="遍历集合"></a>遍历集合</h3><p>foreach循环遍历集合</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//此时还没有给集合加上一个确定的类型，所以集合中的元素先用object</span><span class="token keyword">for</span><span class="token punctuation">(</span>Object obj<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">{</span>    system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="set集合（无序不可重复）"><a href="#set集合（无序不可重复）" class="headerlink" title="set集合（无序不可重复）"></a>set集合（无序不可重复）</h2><p>set集合一般有两种实现类：</p><ul><li><p>HashSet实现类：散列集合，底层是哈希表；<strong><em>保证元素唯一性的原理</em>就是通过hashcode和equals方法</strong>，<strong><em>无序</em>是指存入的数据不是按照顺序存入的，输出的顺序会打乱</strong></p></li><li><p>TreeSet实现类：是树状结构，存放可以有顺序</p></li></ul><h3 id="HashSet常用方法"><a href="#HashSet常用方法" class="headerlink" title="HashSet常用方法"></a>HashSet常用方法</h3><ul><li>创建一个hashSet集合</li></ul><pre class=" language-java"><code class="language-java">Set set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>添加元素</p><pre class=" language-java"><code class="language-java">set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>元素<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>元素<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>判断集合是否包含某个元素(boolean类型)</p><pre class=" language-java"><code class="language-java">set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set集合中，是否存在一个元素与该参数匹配（按照整体对比）</span></code></pre></li><li><p>删除元素</p><pre class=" language-java"><code class="language-java">set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为set集合是没有小标的，只能给定元素来删除，返回值是boolean类型，是否删除成功</span></code></pre></li><li><p>清空集合（无返回类型）</p><pre><code>set.claer();</code></pre></li><li><p>判断集合是否为空</p><pre class=" language-java"><code class="language-java">set<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="遍历集合-1"><a href="#遍历集合-1" class="headerlink" title="遍历集合"></a>遍历集合</h3><p>forearch循环</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>Object obj<span class="token operator">:</span>set<span class="token punctuation">)</span><span class="token punctuation">{</span>    system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>迭代器遍历（Iterator）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//步骤1：根据集合获取对应的迭代器</span>Iterator it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//步骤2：判断是否右下一个元素，有的话执行循环，没有的话结束迭代</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//步骤3：去除光标后面的元素</span>    system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Map集合-无序存放，以键值对存储数据"><a href="#Map集合-无序存放，以键值对存储数据" class="headerlink" title="Map集合(无序存放，以键值对存储数据)"></a>Map集合(无序存放，以键值对存储数据)</h2><p>无序存放，以键值对（key-value）结构存储数据，key不可重复，一个键对应一个值；key相当于一个识别码，通过key找value值</p><h3 id="Map的常用方法"><a href="#Map的常用方法" class="headerlink" title="Map的常用方法"></a>Map的常用方法</h3><ul><li><p>建立一个Map集合</p><pre class=" language-java"><code class="language-java">Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>存入数据（put）</p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>键<span class="token punctuation">,</span>值<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//键（key），值（value）,key不可重复，一个键对应一个值</span></code></pre></li><li><p>获取map的长度(int类型)</p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>通过key获取value</p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取到key对应的值（value）</span></code></pre></li><li><p>查找map中是否存在某个键</p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>查找map中是否存在某个值</p><pre><code>map.containsValue(value);</code></pre></li><li><p>获取集合中的所有元素的key（返回Set集合）</p><pre class=" language-java"><code class="language-java">Set set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用forearch遍历key集合获取value的值</span><span class="token keyword">for</span><span class="token punctuation">(</span>Object obj<span class="token operator">:</span>set<span class="token punctuation">)</span><span class="token punctuation">{</span>    system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="遍历map集合"><a href="#遍历map集合" class="headerlink" title="遍历map集合"></a>遍历map集合</h3><p>Entry+Interator遍历</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第一步，先将map集合中的key，value作为一个整体放入set中；相当于将map集合转为set集合</span>Set set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二步，使用迭代器遍历</span>Interator it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">interator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//第三步，将set中的元素转为key，value格式</span>    <span class="token comment" spellcheck="true">//这里的entry就是键值对存储数据的数据类型</span>    Map<span class="token punctuation">.</span>entry entry <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token punctuation">)</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//key:entry.getKey()</span>    <span class="token comment" spellcheck="true">//value:entry.getvalue();</span>system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key:"</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"value:"</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Collection与Collections的区别"><a href="#Collection与Collections的区别" class="headerlink" title="Collection与Collections的区别"></a>Collection与Collections的区别</h3><ul><li>Collection是集合的父接口</li><li>Collections是操作集合的工具类</li></ul><p><strong>常用方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//给集合排序，java自带的，很少用</span>Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>集合<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打乱顺序</span>Collections<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>集合<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求最大值</span>Collections<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>集合<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="泛型的作用"><a href="#泛型的作用" class="headerlink" title="泛型的作用"></a>泛型的作用</h2><p>在编译器中检查类型的约束，用再集合上，可以用来约束集合中元素的数据类型，泛型尖括号中只能指定一种类型，不能指定多种</p><p><strong>注意：泛型括号中要使用基本数据类型的包装类或者其他引用类型</strong></p><h3 id="泛型在集合中的应用"><a href="#泛型在集合中的应用" class="headerlink" title="泛型在集合中的应用"></a>泛型在集合中的应用</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用尖括号来添加指定泛型，来约束集合，让这个集合只能存放特定的类型数据</span><span class="token comment" spellcheck="true">//如果在使用该list，向里加其他类型的数据，编译器就会报错</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在使用集合的时候，建议给集合添加对应的泛型，让集合的元素数据类型有明确的约束</span><span class="token comment" spellcheck="true">//在Map集合中的泛型，key和value都需要指定的类型</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Double<span class="token operator">></span>maps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Double<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取key的值的集合，也可以指定泛型</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> sets <span class="token operator">=</span> maps<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//带泛型之后，使用forearch迭代器就可以指定类型不用Object了</span><span class="token keyword">for</span><span class="token punctuation">(</span>String str<span class="token operator">:</span>sets<span class="token punctuation">)</span><span class="token punctuation">{</span>    system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用泛型后，entry遍历集合</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将Map转成Set，将Map中的兼职对作为一个整体，存放入set集合</span>Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Double<span class="token operator">>></span> sets <span class="token operator">=</span> maps<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历转换后的Set，将每个key-value都挨个取出来</span><span class="token comment" spellcheck="true">//这里的Map.Entry是作为一个数据类型，里面存的Key-Value键值对</span><span class="token keyword">for</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Double<span class="token operator">></span> e<span class="token operator">:</span>sets<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>泛型中指定对象，让集合中存放指定类型的对象，带泛型后，最好是等号两边泛型保持一致</p><h3 id="泛型的高级应用"><a href="#泛型的高级应用" class="headerlink" title="泛型的高级应用"></a>泛型的高级应用</h3><ul><li><p>在创建类时，在类的后面给定一个泛型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tdemo</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> T age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//T只是这个泛型的代指，一般用T来表示</span></code></pre></li><li><p>在创建对象的时候就可以指定T的类型了</p><pre class=" language-java"><code class="language-java">Tdemo<span class="token operator">&lt;</span>Integer<span class="token operator">></span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tdemo</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="自定义比较器（Comparator与Comparable）"><a href="#自定义比较器（Comparator与Comparable）" class="headerlink" title="自定义比较器（Comparator与Comparable）"></a>自定义比较器（Comparator与Comparable）</h2><h3 id="Comparator比较器（接口）"><a href="#Comparator比较器（接口）" class="headerlink" title="Comparator比较器（接口）"></a>Comparator比较器（接口）</h3><p>集合中的元素可以有比较性</p><ul><li>定义一个类，实现Comparator接口</li><li>在类中实现compare方法，自定义比较规则</li><li>使用比较来对两条数据进行自定义比较（collections.sort()）</li></ul><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> books<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>books<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"01234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>books<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"0123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>books<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"012"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//集合中自带的sort方法大部分时候是用不上的</span><span class="token comment" spellcheck="true">//第一步：自定义比较器，实现接口</span><span class="token keyword">class</span> <span class="token class-name">ByLength</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//重写比较方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span>Object o2<span class="token punctuation">)</span><span class="token punctuation">{</span>        String str1 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>o1<span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>o2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//比如制定一个规则，按他们的长度来比较大小</span>        <span class="token keyword">return</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回0则代表两个相等</span>        <span class="token comment" spellcheck="true">//返回-1，则s2小于s1</span>        <span class="token comment" spellcheck="true">//返回1，则s2大于s1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第二步：创建ByLength的对象</span>Bylength bl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第三步：使用sort方法</span>Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>books<span class="token punctuation">,</span>bl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数1是要进行排序的集合，参数2是我们自定义的比较规则类的实例化对象</span></code></pre><h3 id="Comparable比较器（接口）"><a href="#Comparable比较器（接口）" class="headerlink" title="Comparable比较器（接口）"></a>Comparable比较器（接口）</h3><p>集合中的类型没有比较性</p><ul><li>实现Comparable接口</li><li>重写实现comparableTo方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//集合中存放的都是Student类型</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> stus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stus<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小李"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stus<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stus<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小天"</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为存储的都是对象，系统默认的方法是无法对对象进行比较的</span><span class="token comment" spellcheck="true">//所以我们要让Student类有可比较性</span><span class="token comment" spellcheck="true">//第一步：让实体类，Student实现Comparable接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> inmplements Comparable<span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token comment" spellcheck="true">//set/get</span>    <span class="token comment" spellcheck="true">//toString等</span>    <span class="token punctuation">.</span>    <span class="token punctuation">.</span>    <span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">//重写实现comparaTo方法</span>    <span class="token annotation punctuation">@override</span>       <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Student stu<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里制定一个规则，对年龄比较</span>        retun <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">-</span>stu<span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第二步：实现接口，重写后就可以用Collections.sort(stus)来排序了</span>Collection<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>Comparator中的compare方法，需要一个单独的类，让这个类的对象作为比较的方式，对有两条具有课比较的数据进行比较</li><li>Comparable中的compareTo方法，不需要单独写一个比较的类，是让本身和需要比较的传进来的对象比较</li><li>两个方法的返回值都是int<ul><li>如果返回值是负数，那么认为需要比较的两个数据，前一个小</li><li>如果返回值是正数，那么认为前一个大</li><li>如果返回0，那么就是相等的</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 阶段小结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java核心api </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
